# hacky hacky hacky -- generated by src/gen/spec_gen.rb, then COPIED and hand-tweaked

# this spec is only looking to check each ts_ call doesn't raise or crash and 
# returns the right type, given acceptable args

describe "tree_sigs_spec.rb" do
  before do
    
  end
    
  it ":ts_tree_copy, [Tree], Tree" do
    ret = TreeSitterFFI.ts_tree_copy(TreeSitterFFI::Tree.new)
    ret.should_not == nil
    ret.is_a?(TreeSitterFFI::Tree).should == true
  end

  it ":ts_tree_root_node, [Tree], Node.by_value" do
    ret = TreeSitterFFI.ts_tree_root_node(TreeSitterFFI::Tree.new)
    ret.should_not == nil
    ret.is_a?(TreeSitterFFI::Node).should == true
  end

  it ":ts_tree_language, [Tree], Language" do
    ret = TreeSitterFFI.ts_tree_language(TreeSitterFFI::Tree.new)
    ret.should_not == nil
    ret.is_a?(TreeSitterFFI::Language).should == true
  end

  it ":ts_tree_edit, [Tree, InputEdit.by_ref], :void" do
    ret = TreeSitterFFI.ts_tree_edit(TreeSitterFFI::Tree.new, TreeSitterFFI::InputEdit.new)
    # ret void
  end

  it ":ts_tree_get_changed_ranges, [Tree, Tree, :uint32_p], :array_of_range" do
    ret = TreeSitterFFI.ts_tree_get_changed_ranges(TreeSitterFFI::Tree.new, TreeSitterFFI::Tree.new, ::FFI::MemoryPointer.new(:uint32, 1))
    ret.should_not == nil
    ret.is_a?(FFI::Pointer).should == true
  end

  it ":ts_tree_print_dot_graph, [Tree, :file_pointer], :void" do
    ret = TreeSitterFFI.ts_tree_print_dot_graph(TreeSitterFFI::Tree.new, ::FFI::MemoryPointer.new(:file_pointer, 1))
    # ret void
  end

  it ":ts_tree_cursor_reset, [TreeCursor.by_ref, Node.by_value], :void" do
    ret = TreeSitterFFI.ts_tree_cursor_reset(TreeSitterFFI::TreeCursor.new, TreeSitterFFI::Node.new)
    # ret void
  end

  it ":ts_tree_cursor_current_node, [TreeCursor.by_ref], Node.by_value" do
    ret = TreeSitterFFI.ts_tree_cursor_current_node(TreeSitterFFI::TreeCursor.new)
    ret.should_not == nil
    ret.is_a?(TreeSitterFFI::Node).should == true
  end

  it ":ts_tree_cursor_current_field_name, [TreeCursor.by_ref], :string" do
    ret = TreeSitterFFI.ts_tree_cursor_current_field_name(TreeSitterFFI::TreeCursor.new)
    ret.should_not == nil
    ret.is_a?(String).should == true
  end

  it ":ts_tree_cursor_current_field_id, [TreeCursor.by_ref], :field_id" do
    ret = TreeSitterFFI.ts_tree_cursor_current_field_id(TreeSitterFFI::TreeCursor.new)
    ret.should_not == nil
    ret.is_a?(Integer).should == true
  end

  it ":ts_tree_cursor_goto_parent, [TreeCursor.by_ref], :bool" do
    ret = TreeSitterFFI.ts_tree_cursor_goto_parent(TreeSitterFFI::TreeCursor.new)
    [true, false].include?(ret).should == true
  end

  it ":ts_tree_cursor_goto_next_sibling, [TreeCursor.by_ref], :bool" do
    ret = TreeSitterFFI.ts_tree_cursor_goto_next_sibling(TreeSitterFFI::TreeCursor.new)
    [true, false].include?(ret).should == true
  end

  it ":ts_tree_cursor_goto_first_child, [TreeCursor.by_ref], :bool" do
    ret = TreeSitterFFI.ts_tree_cursor_goto_first_child(TreeSitterFFI::TreeCursor.new)
    [true, false].include?(ret).should == true
  end

  it ":ts_tree_cursor_goto_first_child_for_byte, [TreeCursor.by_ref, :uint32], :int64" do
    ret = TreeSitterFFI.ts_tree_cursor_goto_first_child_for_byte(TreeSitterFFI::TreeCursor.new, ::FFI::MemoryPointer.new(:uint32, 1))
    ret.should_not == nil
    ret.is_a?(Integer).should == true
  end

  it ":ts_tree_cursor_goto_first_child_for_point, [TreeCursor.by_ref, Point.by_value], :int64" do
    ret = TreeSitterFFI.ts_tree_cursor_goto_first_child_for_point(TreeSitterFFI::TreeCursor.new, TreeSitterFFI::Point.new)
    ret.should_not == nil
    ret.is_a?(Integer).should == true
  end

  it ":ts_tree_cursor_copy, [TreeCursor.by_ref], TreeCursor.by_value" do
    ret = TreeSitterFFI.ts_tree_cursor_copy(TreeSitterFFI::TreeCursor.new)
    ret.should_not == nil
    ret.is_a?(TreeSitterFFI::TreeCursor).should == true
  end

end
