# hacky hacky hacky -- generated by src/spec_gen.rb, then hand-tweaked

# this spec is only looking to check each ts_ call doesn't raise or crash and 
# returns the right type, given acceptable args

describe "tree_spec.rb" do
	before do
	end
    
	it "copy() # => Tree" do
		ret = tree_0.copy()
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::Tree).should == true
	end

	it "root_node() # => Node" do
		ret = tree_0.root_node()
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::Node).should == true
	end

	it "language() # => Language" do
		ret = tree_0.language()
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::Language).should == true
	end

	it "edit(InputEdit) # => :void" do
		ret = tree_0.edit(arg_1)
		# ret void
	end

	it "get_changed_ranges(Tree, Integer) # => Pointer" do
		ret = tree_0.get_changed_ranges(arg_1, arg_2)
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::Pointer).should == true
	end

	it "print_dot_graph(Pointer) # => :void" do
		ret = tree_0.print_dot_graph(arg_1)
		# ret void
	end

	it "reset(Node) # => :void" do
		ret = tree_cursor_0.reset(arg_1)
		# ret void
	end

	it "current_node() # => Node" do
		ret = tree_cursor_0.current_node()
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::Node).should == true
	end

	it "current_field_name() # => String" do
		ret = tree_cursor_0.current_field_name()
		ret.should_not == nil
		ret.is_a?(String).should == true
	end

	it "current_field_id() # => Integer" do
		ret = tree_cursor_0.current_field_id()
		ret.should_not == nil
		ret.is_a?(Integer).should == true
	end

	it "goto_parent() # => :bool" do
		ret = tree_cursor_0.goto_parent()
		[true, false].include?(ret).should == true
	end

	it "goto_next_sibling() # => :bool" do
		ret = tree_cursor_0.goto_next_sibling()
		[true, false].include?(ret).should == true
	end

	it "goto_first_child() # => :bool" do
		ret = tree_cursor_0.goto_first_child()
		[true, false].include?(ret).should == true
	end

	it "goto_first_child_for_byte(Integer) # => Integer" do
		ret = tree_cursor_0.goto_first_child_for_byte(arg_1)
		ret.should_not == nil
		ret.is_a?(Integer).should == true
	end

	it "goto_first_child_for_point(Point) # => Integer" do
		ret = tree_cursor_0.goto_first_child_for_point(arg_1)
		ret.should_not == nil
		ret.is_a?(Integer).should == true
	end

	it "copy() # => TreeCursor" do
		ret = tree_cursor_0.copy()
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::TreeCursor).should == true
	end


end
