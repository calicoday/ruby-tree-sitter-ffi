# hacky hacky hacky -- generated by src/spec_gen.rb, then hand-tweaked

# this spec is only looking to check each ts_ call doesn't raise or crash and 
# returns the right type, given acceptable args

describe "language_spec.rb" do
	before do
	end
    
	it "symbol_count() # => Integer" do
		ret = language_0.symbol_count()
		ret.should_not == nil
		ret.is_a?(Integer).should == true
	end

	it "symbol_name(Integer) # => Integer" do
		ret = language_0.symbol_name(arg_1)
		ret.should_not == nil
		ret.is_a?(Integer).should == true
	end

	it "symbol_for_name(String, Integer, :bool) # => Integer" do
		ret = language_0.symbol_for_name(arg_1, arg_2, arg_3)
		ret.should_not == nil
		ret.is_a?(Integer).should == true
	end

	it "field_count() # => Integer" do
		ret = language_0.field_count()
		ret.should_not == nil
		ret.is_a?(Integer).should == true
	end

	it "field_name_for_id(Integer) # => String" do
		ret = language_0.field_name_for_id(arg_1)
		ret.should_not == nil
		ret.is_a?(String).should == true
	end

	it "field_id_for_name(String, Integer) # => Integer" do
		ret = language_0.field_id_for_name(arg_1, arg_2)
		ret.should_not == nil
		ret.is_a?(Integer).should == true
	end

	it "symbol_type(Integer) # => SymbolType" do
		ret = language_0.symbol_type(arg_1)
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::SymbolType).should == true
	end

	it "version() # => Integer" do
		ret = language_0.version()
		ret.should_not == nil
		ret.is_a?(Integer).should == true
	end


end
