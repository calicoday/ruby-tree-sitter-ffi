# hacky hacky hacky -- generated by src/spec_gen.rb, then hand-tweaked

# this spec is only looking to check each ts_ call doesn't raise or crash and 
# returns the right type, given acceptable args

describe "parser_spec.rb" do
	before do
	end
    
	it "set_language(Language) # => :bool" do
		ret = parser_0.set_language(arg_1)
		[true, false].include?(ret).should == true
	end

	it "language() # => Language" do
		ret = parser_0.language()
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::Language).should == true
	end

	it "set_included_ranges(Range, Integer) # => :bool" do
		ret = parser_0.set_included_ranges(arg_1, arg_2)
		[true, false].include?(ret).should == true
	end

	it "included_ranges(Integer) # => Pointer" do
		ret = parser_0.included_ranges(arg_1)
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::Pointer).should == true
	end

	it "parse(Tree, Input) # => Tree" do
		ret = parser_0.parse(arg_1, arg_2)
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::Tree).should == true
	end

	it "parse_string(Tree, String, Integer) # => Tree" do
		ret = parser_0.parse_string(arg_1, arg_2, arg_3)
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::Tree).should == true
	end

	it "parse_string_encoding(Tree, String, Integer, InputEncoding) # => Tree" do
		ret = parser_0.parse_string_encoding(arg_1, arg_2, arg_3, arg_4)
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::Tree).should == true
	end

	it "reset() # => :void" do
		ret = parser_0.reset()
		# ret void
	end

	it "set_timeout_micros(Integer) # => :void" do
		ret = parser_0.set_timeout_micros(arg_1)
		# ret void
	end

	it "timeout_micros() # => Integer" do
		ret = parser_0.timeout_micros()
		ret.should_not == nil
		ret.is_a?(Integer).should == true
	end

	it "set_cancellation_flag(Pointer) # => :void" do
		ret = parser_0.set_cancellation_flag(arg_1)
		# ret void
	end

	it "cancellation_flag() # => Pointer" do
		ret = parser_0.cancellation_flag()
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::Pointer).should == true
	end

	it "set_logger(Logger) # => :void" do
		ret = parser_0.set_logger(arg_1)
		# ret void
	end

	it "logger() # => Logger" do
		ret = parser_0.logger()
		ret.should_not == nil
		ret.is_a?(TreeSitterFFI::Logger).should == true
	end

	it "print_dot_graphs(Integer) # => :void" do
		ret = parser_0.print_dot_graphs(arg_1)
		# ret void
	end


end
