# hacky hacky hacky -- generated by src/gen/spec_gen.rb, then COPIED and hand-tweaked

# this spec is only looking to check each ts_ call doesn't raise or crash and 
# returns the right type, given acceptable args

describe "query_sigs_spec.rb" do
  before do
    
  end
    
  it ":ts_query_pattern_count, [Query], :uint32" do
    ret = TreeSitterFFI.ts_query_pattern_count(TreeSitterFFI::Query.new)
    ret.should_not == nil
    ret.is_a?(Integer).should == true
  end

  it ":ts_query_capture_count, [Query], :uint32" do
    ret = TreeSitterFFI.ts_query_capture_count(TreeSitterFFI::Query.new)
    ret.should_not == nil
    ret.is_a?(Integer).should == true
  end

  it ":ts_query_string_count, [Query], :uint32" do
    ret = TreeSitterFFI.ts_query_string_count(TreeSitterFFI::Query.new)
    ret.should_not == nil
    ret.is_a?(Integer).should == true
  end

  it ":ts_query_start_byte_for_pattern, [Query, :uint32], :uint32" do
    ret = TreeSitterFFI.ts_query_start_byte_for_pattern(TreeSitterFFI::Query.new, ::FFI::MemoryPointer.new(:uint32, 1))
    ret.should_not == nil
    ret.is_a?(Integer).should == true
  end

  it ":ts_query_predicates_for_pattern, [Query, :uint32, :uint32_p], QueryPredicateStep.by_ref" do
    ret = TreeSitterFFI.ts_query_predicates_for_pattern(TreeSitterFFI::Query.new, ::FFI::MemoryPointer.new(:uint32, 1), ::FFI::MemoryPointer.new(:uint32, 1))
    ret.should_not == nil
    ret.is_a?(TreeSitterFFI::QueryPredicateStep).should == true
  end

  it ":ts_query_step_is_definite, [Query, :uint32], :bool" do
    ret = TreeSitterFFI.ts_query_step_is_definite(TreeSitterFFI::Query.new, ::FFI::MemoryPointer.new(:uint32, 1))
    [true, false].include?(ret).should == true
  end

  it ":ts_query_capture_name_for_id, [Query, :uint32, :uint32_p], :string" do
    ret = TreeSitterFFI.ts_query_capture_name_for_id(TreeSitterFFI::Query.new, ::FFI::MemoryPointer.new(:uint32, 1), ::FFI::MemoryPointer.new(:uint32, 1))
    ret.should_not == nil
    ret.is_a?(String).should == true
  end

  it ":ts_query_string_value_for_id, [Query, :uint32, :uint32_p], :string" do
    ret = TreeSitterFFI.ts_query_string_value_for_id(TreeSitterFFI::Query.new, ::FFI::MemoryPointer.new(:uint32, 1), ::FFI::MemoryPointer.new(:uint32, 1))
    ret.should_not == nil
    ret.is_a?(String).should == true
  end

  it ":ts_query_disable_capture, [Query, :string, :uint32], :void" do
    ret = TreeSitterFFI.ts_query_disable_capture(TreeSitterFFI::Query.new, ::FFI::MemoryPointer.new(:string, 1), ::FFI::MemoryPointer.new(:uint32, 1))
    # ret void
  end

  it ":ts_query_disable_pattern, [Query, :uint32], :void" do
    ret = TreeSitterFFI.ts_query_disable_pattern(TreeSitterFFI::Query.new, ::FFI::MemoryPointer.new(:uint32, 1))
    # ret void
  end

  it ":ts_query_cursor_exec, [QueryCursor, Query, Node.by_value], :void" do
    ret = TreeSitterFFI.ts_query_cursor_exec(TreeSitterFFI::QueryCursor.new, TreeSitterFFI::Query.new, TreeSitterFFI::Node.new)
    # ret void
  end

  it ":ts_query_cursor_did_exceed_match_limit, [QueryCursor], :bool" do
    ret = TreeSitterFFI.ts_query_cursor_did_exceed_match_limit(TreeSitterFFI::QueryCursor.new)
    [true, false].include?(ret).should == true
  end

  it ":ts_query_cursor_match_limit, [QueryCursor], :uint32" do
    ret = TreeSitterFFI.ts_query_cursor_match_limit(TreeSitterFFI::QueryCursor.new)
    ret.should_not == nil
    ret.is_a?(Integer).should == true
  end

  it ":ts_query_cursor_set_match_limit, [QueryCursor, :uint32], :bool" do
    ret = TreeSitterFFI.ts_query_cursor_set_match_limit(TreeSitterFFI::QueryCursor.new, ::FFI::MemoryPointer.new(:uint32, 1))
    [true, false].include?(ret).should == true
  end

  it ":ts_query_cursor_set_byte_range, [QueryCursor, :uint32, :uint32], :void" do
    ret = TreeSitterFFI.ts_query_cursor_set_byte_range(TreeSitterFFI::QueryCursor.new, ::FFI::MemoryPointer.new(:uint32, 1), ::FFI::MemoryPointer.new(:uint32, 1))
    # ret void
  end

  it ":ts_query_cursor_set_point_range, [QueryCursor, Point], :void" do
    ret = TreeSitterFFI.ts_query_cursor_set_point_range(TreeSitterFFI::QueryCursor.new, TreeSitterFFI::Point.new)
    # ret void
  end

  it ":ts_query_cursor_next_match, [QueryCursor, QueryMatch.by_ref], :bool" do
    ret = TreeSitterFFI.ts_query_cursor_next_match(TreeSitterFFI::QueryCursor.new, TreeSitterFFI::QueryMatch.new)
    [true, false].include?(ret).should == true
  end

  it ":ts_query_cursor_remove_match, [QueryCursor, :uint32], :void" do
    ret = TreeSitterFFI.ts_query_cursor_remove_match(TreeSitterFFI::QueryCursor.new, ::FFI::MemoryPointer.new(:uint32, 1))
    # ret void
  end

  it ":ts_query_cursor_next_capture, [QueryCursor, QueryMatch.by_ref, :uint32_p], :bool" do
    ret = TreeSitterFFI.ts_query_cursor_next_capture(TreeSitterFFI::QueryCursor.new, TreeSitterFFI::QueryMatch.new, ::FFI::MemoryPointer.new(:uint32, 1))
    [true, false].include?(ret).should == true
  end

end
