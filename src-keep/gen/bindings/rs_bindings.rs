// lib/binding_rust/bindings.rs
// extract ^\s*(pub fn [^;]+;)
// then s/([^;])\n[\t ]*/\1/
// then s/\(\s+/(/

pub fn ts_parser_new() -> *mut TSParser;
pub fn ts_parser_delete(parser: *mut TSParser);
pub fn ts_parser_set_language(self_: *mut TSParser, language: *const TSLanguage) -> bool;
pub fn ts_parser_language(self_: *const TSParser) -> *const TSLanguage;
pub fn ts_parser_set_included_ranges(self_: *mut TSParser, ranges: *const TSRange, length: u32, ) -> bool;
pub fn ts_parser_included_ranges(self_: *const TSParser, length: *mut u32) -> *const TSRange;
pub fn ts_parser_parse(self_: *mut TSParser, old_tree: *const TSTree, input: TSInput, ) -> *mut TSTree;
pub fn ts_parser_parse_string(self_: *mut TSParser, old_tree: *const TSTree, string: *const ::std::os::raw::c_char, length: u32, ) -> *mut TSTree;
pub fn ts_parser_parse_string_encoding(self_: *mut TSParser, old_tree: *const TSTree, string: *const ::std::os::raw::c_char, length: u32, encoding: TSInputEncoding, ) -> *mut TSTree;
pub fn ts_parser_reset(self_: *mut TSParser);
pub fn ts_parser_set_timeout_micros(self_: *mut TSParser, timeout: u64);
pub fn ts_parser_timeout_micros(self_: *const TSParser) -> u64;
pub fn ts_parser_set_cancellation_flag(self_: *mut TSParser, flag: *const usize);
pub fn ts_parser_cancellation_flag(self_: *const TSParser) -> *const usize;
pub fn ts_parser_set_logger(self_: *mut TSParser, logger: TSLogger);
pub fn ts_parser_logger(self_: *const TSParser) -> TSLogger;
pub fn ts_parser_print_dot_graphs(self_: *mut TSParser, file: ::std::os::raw::c_int);
pub fn ts_tree_copy(self_: *const TSTree) -> *mut TSTree;
pub fn ts_tree_delete(self_: *mut TSTree);
pub fn ts_tree_root_node(self_: *const TSTree) -> TSNode;
pub fn ts_tree_language(arg1: *const TSTree) -> *const TSLanguage;
pub fn ts_tree_edit(self_: *mut TSTree, edit: *const TSInputEdit);
pub fn ts_tree_get_changed_ranges(old_tree: *const TSTree, new_tree: *const TSTree, length: *mut u32, ) -> *mut TSRange;
pub fn ts_tree_print_dot_graph(arg1: *const TSTree, arg2: *mut FILE);
pub fn ts_node_type(arg1: TSNode) -> *const ::std::os::raw::c_char;
pub fn ts_node_symbol(arg1: TSNode) -> TSSymbol;
pub fn ts_node_start_byte(arg1: TSNode) -> u32;
pub fn ts_node_start_point(arg1: TSNode) -> TSPoint;
pub fn ts_node_end_byte(arg1: TSNode) -> u32;
pub fn ts_node_end_point(arg1: TSNode) -> TSPoint;
pub fn ts_node_string(arg1: TSNode) -> *mut ::std::os::raw::c_char;
pub fn ts_node_is_null(arg1: TSNode) -> bool;
pub fn ts_node_is_named(arg1: TSNode) -> bool;
pub fn ts_node_is_missing(arg1: TSNode) -> bool;
pub fn ts_node_is_extra(arg1: TSNode) -> bool;
pub fn ts_node_has_changes(arg1: TSNode) -> bool;
pub fn ts_node_has_error(arg1: TSNode) -> bool;
pub fn ts_node_parent(arg1: TSNode) -> TSNode;
pub fn ts_node_child(arg1: TSNode, arg2: u32) -> TSNode;
pub fn ts_node_child_count(arg1: TSNode) -> u32;
pub fn ts_node_named_child(arg1: TSNode, arg2: u32) -> TSNode;
pub fn ts_node_named_child_count(arg1: TSNode) -> u32;
pub fn ts_node_child_by_field_name(self_: TSNode, field_name: *const ::std::os::raw::c_char, field_name_length: u32, ) -> TSNode;
pub fn ts_node_child_by_field_id(arg1: TSNode, arg2: TSFieldId) -> TSNode;
pub fn ts_node_next_sibling(arg1: TSNode) -> TSNode;
pub fn ts_node_prev_sibling(arg1: TSNode) -> TSNode;
pub fn ts_node_next_named_sibling(arg1: TSNode) -> TSNode;
pub fn ts_node_prev_named_sibling(arg1: TSNode) -> TSNode;
pub fn ts_node_first_child_for_byte(arg1: TSNode, arg2: u32) -> TSNode;
pub fn ts_node_first_named_child_for_byte(arg1: TSNode, arg2: u32) -> TSNode;
pub fn ts_node_descendant_for_byte_range(arg1: TSNode, arg2: u32, arg3: u32) -> TSNode;
pub fn ts_node_descendant_for_point_range(arg1: TSNode, arg2: TSPoint, arg3: TSPoint) -> TSNode;
pub fn ts_node_named_descendant_for_byte_range(arg1: TSNode, arg2: u32, arg3: u32) -> TSNode;
pub fn ts_node_named_descendant_for_point_range(arg1: TSNode, arg2: TSPoint, arg3: TSPoint, ) -> TSNode;
pub fn ts_node_edit(arg1: *mut TSNode, arg2: *const TSInputEdit);
pub fn ts_node_eq(arg1: TSNode, arg2: TSNode) -> bool;
pub fn ts_tree_cursor_new(arg1: TSNode) -> TSTreeCursor;
pub fn ts_tree_cursor_delete(arg1: *mut TSTreeCursor);
pub fn ts_tree_cursor_reset(arg1: *mut TSTreeCursor, arg2: TSNode);
pub fn ts_tree_cursor_current_node(arg1: *const TSTreeCursor) -> TSNode;
pub fn ts_tree_cursor_current_field_name(arg1: *const TSTreeCursor, ) -> *const ::std::os::raw::c_char;
pub fn ts_tree_cursor_current_field_id(arg1: *const TSTreeCursor) -> TSFieldId;
pub fn ts_tree_cursor_goto_parent(arg1: *mut TSTreeCursor) -> bool;
pub fn ts_tree_cursor_goto_next_sibling(arg1: *mut TSTreeCursor) -> bool;
pub fn ts_tree_cursor_goto_first_child(arg1: *mut TSTreeCursor) -> bool;
pub fn ts_tree_cursor_goto_first_child_for_byte(arg1: *mut TSTreeCursor, arg2: u32) -> i64;
pub fn ts_tree_cursor_copy(arg1: *const TSTreeCursor) -> TSTreeCursor;
pub fn ts_query_new(language: *const TSLanguage, source: *const ::std::os::raw::c_char, source_len: u32, error_offset: *mut u32, error_type: *mut TSQueryError, ) -> *mut TSQuery;
pub fn ts_query_delete(arg1: *mut TSQuery);
pub fn ts_query_pattern_count(arg1: *const TSQuery) -> u32;
pub fn ts_query_capture_count(arg1: *const TSQuery) -> u32;
pub fn ts_query_string_count(arg1: *const TSQuery) -> u32;
pub fn ts_query_start_byte_for_pattern(arg1: *const TSQuery, arg2: u32) -> u32;
pub fn ts_query_predicates_for_pattern(self_: *const TSQuery, pattern_index: u32, length: *mut u32, ) -> *const TSQueryPredicateStep;
pub fn ts_query_step_is_definite(self_: *const TSQuery, byte_offset: u32) -> bool;
pub fn ts_query_capture_name_for_id(arg1: *const TSQuery, id: u32, length: *mut u32, ) -> *const ::std::os::raw::c_char;
pub fn ts_query_string_value_for_id(arg1: *const TSQuery, id: u32, length: *mut u32, ) -> *const ::std::os::raw::c_char;
pub fn ts_query_disable_capture(arg1: *mut TSQuery, arg2: *const ::std::os::raw::c_char, arg3: u32, );
pub fn ts_query_disable_pattern(arg1: *mut TSQuery, arg2: u32);
pub fn ts_query_cursor_new() -> *mut TSQueryCursor;
pub fn ts_query_cursor_delete(arg1: *mut TSQueryCursor);
pub fn ts_query_cursor_exec(arg1: *mut TSQueryCursor, arg2: *const TSQuery, arg3: TSNode);
pub fn ts_query_cursor_did_exceed_match_limit(arg1: *const TSQueryCursor) -> bool;
pub fn ts_query_cursor_set_byte_range(arg1: *mut TSQueryCursor, arg2: u32, arg3: u32);
pub fn ts_query_cursor_set_point_range(arg1: *mut TSQueryCursor, arg2: TSPoint, arg3: TSPoint);
pub fn ts_query_cursor_next_match(arg1: *mut TSQueryCursor, match_: *mut TSQueryMatch) -> bool;
pub fn ts_query_cursor_remove_match(arg1: *mut TSQueryCursor, id: u32);
pub fn ts_query_cursor_next_capture(arg1: *mut TSQueryCursor, match_: *mut TSQueryMatch, capture_index: *mut u32, ) -> bool;
pub fn ts_language_symbol_count(arg1: *const TSLanguage) -> u32;
pub fn ts_language_symbol_name(arg1: *const TSLanguage, arg2: TSSymbol, ) -> *const ::std::os::raw::c_char;
pub fn ts_language_symbol_for_name(self_: *const TSLanguage, string: *const ::std::os::raw::c_char, length: u32, is_named: bool, ) -> TSSymbol;
pub fn ts_language_field_count(arg1: *const TSLanguage) -> u32;
pub fn ts_language_field_name_for_id(arg1: *const TSLanguage, arg2: TSFieldId, ) -> *const ::std::os::raw::c_char;
pub fn ts_language_field_id_for_name(arg1: *const TSLanguage, arg2: *const ::std::os::raw::c_char, arg3: u32, ) -> TSFieldId;
pub fn ts_language_symbol_type(arg1: *const TSLanguage, arg2: TSSymbol) -> TSSymbolType;
pub fn ts_language_version(arg1: *const TSLanguage) -> u32;
