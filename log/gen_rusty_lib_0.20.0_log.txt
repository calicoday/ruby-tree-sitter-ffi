src/rusty/gen_rusty.rb
+=+=+ Fri 23 Sep 2022 10:58:56 EDT

=== path: #<Pathname:src/tree-sitter-0.20.0/rusty-prep/boss_rusty_prep.rb>
  to_s: "src/tree-sitter-0.20.0/rusty-prep/boss_rusty_prep.rb"
=== path: #<Pathname:src/tree-sitter-0.20.0/rusty-prep/node_rusty_prep.rb>
  to_s: "src/tree-sitter-0.20.0/rusty-prep/node_rusty_prep.rb"
=== path: #<Pathname:src/tree-sitter-0.20.0/rusty-prep/tree_rusty_prep.rb>
  to_s: "src/tree-sitter-0.20.0/rusty-prep/tree_rusty_prep.rb"
=== path: #<Pathname:src/tree-sitter-0.20.0/rusty-prep/query_rusty_prep.rb>
  to_s: "src/tree-sitter-0.20.0/rusty-prep/query_rusty_prep.rb"
boss: node
test_node_child(): 
test_node_children(): skip (patch)
test_node_children_by_field_name(): skip (patch)
test_node_parent_of_child_by_field_name(): 
test_node_field_name_for_child(): 
test_node_child_by_field_name_with_extra_hidden_children(): 
test_node_named_child(): 
test_node_named_child_with_aliases_and_extras(): skip (generate)
test_node_descendant_for_range(): 
test_node_edit(): skip (patch)
test_node_is_extra(): 
test_node_sexp(): 
test_node_field_names(): skip (generate)
test_node_field_calls_in_language_without_fields(): skip (generate)
test_node_is_named_but_aliased_as_anonymous(): skip (generate)
test_node_numeric_symbols_respect_simple_aliases(): 
get_all_nodes(tree: &Tree): skip ([internal])
parse_json_example(): 
if stubs
boss: tree
test_tree_edit(): 
test_tree_cursor(): 
test_tree_cursor_fields(): 
test_tree_cursor_child_for_point(): 
test_tree_node_equality(): 
test_get_changed_ranges(): skip ([internal])
index_of(text: &Vec<u8>, substring: &str): skip ([internal])
range_of(text: &Vec<u8>, substring: &str): skip ([internal])
get_changed_ranges(
    parser: &mut Parser,
    tree: &mut Tree,
    source_code: &mut Vec<u8>,
    edit: Edit,
): skip ([internal], patch)
boss: query
  captures m: test_query_errors_on_invalid_syntax()
  square m: test_query_errors_on_invalid_syntax()
  [
  ]
  [
  ]
test_query_errors_on_invalid_syntax(): 
  captures m: test_query_errors_on_invalid_symbols()
  square m: test_query_errors_on_invalid_symbols()
test_query_errors_on_invalid_symbols(): 
  captures m: test_query_errors_on_invalid_predicates()
  square m: test_query_errors_on_invalid_predicates()
test_query_errors_on_invalid_predicates(): skip (choke, noVec)
  captures m: test_query_errors_on_impossible_patterns()
  square m: test_query_errors_on_impossible_patterns()
test_query_errors_on_impossible_patterns(): 
  captures m: test_query_verifies_possible_patterns_with_aliased_parent_nodes()
  square m: test_query_verifies_possible_patterns_with_aliased_parent_nodes()
test_query_verifies_possible_patterns_with_aliased_parent_nodes(): 
  captures m: test_query_matches_with_simple_pattern()
    count: "0, "
    square m: test_query_matches_with_simple_pattern()
  [
    ["", "(\"fn-name\", \"one\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_simple_pattern()
  [
    ["", "(\"fn-name\", \"three\")"]
  ]
  square m: test_query_matches_with_simple_pattern()
test_query_matches_with_simple_pattern(): 
  captures m: test_query_matches_with_multiple_on_same_root()
    count: "\n                    0,\n                    "
    square m: test_query_matches_with_multiple_on_same_root()
  [
    ["\n                        ", "(\"the-class-name\", \"Person\")"]
    [",\n                        ", "(\"the-method-name\", \"constructor\")"]
    [",\n                    ", nil]
  ]
    count: "\n                    0,\n                    "
    square m: test_query_matches_with_multiple_on_same_root()
  [
    ["\n                        ", "(\"the-class-name\", \"Person\")"]
    [",\n                        ", "(\"the-method-name\", \"getFullName\")"]
    [",\n                    ", nil]
  ]
  square m: test_query_matches_with_multiple_on_same_root()
test_query_matches_with_multiple_on_same_root(): 
  captures m: test_query_matches_with_multiple_patterns_different_roots()
    count: "0, "
    square m: test_query_matches_with_multiple_patterns_different_roots()
  [
    ["", "(\"fn-def\", \"f1\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_multiple_patterns_different_roots()
  [
    ["", "(\"fn-ref\", \"f2\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_multiple_patterns_different_roots()
  [
    ["", "(\"fn-ref\", \"f3\")"]
  ]
  square m: test_query_matches_with_multiple_patterns_different_roots()
test_query_matches_with_multiple_patterns_different_roots(): 
  captures m: test_query_matches_with_multiple_patterns_same_root()
    count: "1, "
    square m: test_query_matches_with_multiple_patterns_same_root()
  [
    ["", "(\"method-def\", \"b\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_multiple_patterns_same_root()
  [
    ["", "(\"method-def\", \"d\")"]
  ]
  square m: test_query_matches_with_multiple_patterns_same_root()
test_query_matches_with_multiple_patterns_same_root(): 
  captures m: test_query_matches_with_nesting_and_no_fields()
    count: "0, "
    square m: test_query_matches_with_nesting_and_no_fields()
  [
    ["", "(\"x1\", \"c\")"]
    [", ", "(\"x2\", \"d\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nesting_and_no_fields()
  [
    ["", "(\"x1\", \"e\")"]
    [", ", "(\"x2\", \"f\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nesting_and_no_fields()
  [
    ["", "(\"x1\", \"e\")"]
    [", ", "(\"x2\", \"g\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nesting_and_no_fields()
  [
    ["", "(\"x1\", \"f\")"]
    [", ", "(\"x2\", \"g\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nesting_and_no_fields()
  [
    ["", "(\"x1\", \"e\")"]
    [", ", "(\"x2\", \"h\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nesting_and_no_fields()
  [
    ["", "(\"x1\", \"f\")"]
    [", ", "(\"x2\", \"h\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nesting_and_no_fields()
  [
    ["", "(\"x1\", \"g\")"]
    [", ", "(\"x2\", \"h\")"]
  ]
  square m: test_query_matches_with_nesting_and_no_fields()
test_query_matches_with_nesting_and_no_fields(): 
  captures m: test_query_matches_with_many_results()
    count: "0, "
    square m: test_query_matches_with_many_results()
  [
    ["", "(\"element\", \"hello\")"]
  ]
  square m: test_query_matches_with_many_results()
test_query_matches_with_many_results(): skip (bc why???!!!)
  captures m: test_query_matches_with_many_overlapping_results()
    count: "0, "
    square m: test_query_matches_with_many_overlapping_results()
  [
    ["", "(\"method\", \"foo\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_many_overlapping_results()
  [
    ["", "(\"function\", \"bar\")"]
  ]
    count: "2, "
    square m: test_query_matches_with_many_overlapping_results()
  [
    ["", "(\"constant\", \"BAZ\")"]
  ]
  square m: test_query_matches_with_many_overlapping_results()
test_query_matches_with_many_overlapping_results(): skip (bc why???!!!)
  captures m: test_query_matches_capturing_error_nodes()
    count: "0, "
    square m: test_query_matches_capturing_error_nodes()
  [
    ["", "(\"the-error\", \":e:\")"]
    [", ", "(\"the-error-identifier\", \"e\")"]
  ]
  square m: test_query_matches_capturing_error_nodes()
test_query_matches_capturing_error_nodes(): 
  captures m: test_query_matches_with_extra_children()
    count: "0, "
    square m: test_query_matches_with_extra_children()
  [
    ["", "(\"top_level_comment\", \"# top-level\")"]
  ]
    count: "\n                    1,\n                    "
    square m: test_query_matches_with_extra_children()
  [
    ["", "(\n                        \"heredoc_in_args\",\n                        \"\\n                HELLO\\n                IN_ARGS\",\n                    )"]
  ]
  square m: test_query_matches_with_extra_children()
test_query_matches_with_extra_children(): 
  captures m: test_query_matches_with_named_wildcard()
    count: "0, "
    square m: test_query_matches_with_named_wildcard()
  [
    ["", "(\"the-return-value\", \"a + b - c\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_named_wildcard()
  [
    ["", "(\"the-operator\", \"+\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_named_wildcard()
  [
    ["", "(\"the-operator\", \"-\")"]
  ]
  square m: test_query_matches_with_named_wildcard()
test_query_matches_with_named_wildcard(): 
  captures m: test_query_matches_with_wildcard_at_the_root()
    count: "0, "
    square m: test_query_matches_with_wildcard_at_the_root()
  [
    ["", "(\"doc\", \"/* two */\")"]
    [", ", "(\"name\", \"y\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_wildcard_at_the_root()
  [
    ["", "(\"a\", \"'hi'\")"]
  ]
    count: "2, "
    square m: test_query_matches_with_wildcard_at_the_root()
  [
    ["", "(\"c\", \"true\")"]
  ]
    count: "3, "
    square m: test_query_matches_with_wildcard_at_the_root()
  [
    ["", "(\"d\", \"false\")"]
  ]
  square m: test_query_matches_with_wildcard_at_the_root()
test_query_matches_with_wildcard_at_the_root(): 
  captures m: test_query_matches_with_immediate_siblings()
    count: "0, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"parent\", \"a\")"]
    [", ", "(\"child\", \"b\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"parent\", \"b\")"]
    [", ", "(\"child\", \"c\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"parent\", \"c\")"]
    [", ", "(\"child\", \"d\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"last-child\", \"d\")"]
  ]
    count: "2, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"first-element\", \"w\")"]
  ]
    count: "2, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"first-element\", \"1\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"first-stmt\", \"b()\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"stmt\", \"b()\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"stmt\", \"c()\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"stmt\", \"if d(): e(); f()\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"first-stmt\", \"e()\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"stmt\", \"e()\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"stmt\", \"f()\")"]
  ]
    count: "2, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"last-stmt\", \"f()\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"stmt\", \"g()\")"]
  ]
    count: "2, "
    square m: test_query_matches_with_immediate_siblings()
  [
    ["", "(\"last-stmt\", \"g()\")"]
  ]
  square m: test_query_matches_with_immediate_siblings()
test_query_matches_with_immediate_siblings(): 
  captures m: test_query_matches_with_last_named_child()
    count: "0, "
    square m: test_query_matches_with_last_named_child()
  [
    ["", "(\"last_id\", \"c\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_last_named_child()
  [
    ["", "(\"last_id\", \"i\")"]
  ]
  square m: test_query_matches_with_last_named_child()
test_query_matches_with_last_named_child(): 
  captures m: test_query_matches_with_negated_fields()
    count: "0, "
    square m: test_query_matches_with_negated_fields()
  [
    ["", "(\"import_name\", \"c\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_negated_fields()
  [
    ["", "(\"export_name\", \"g\")"]
  ]
    count: "4, "
    square m: test_query_matches_with_negated_fields()
  [
    ["", "(\"export_child\", \"'p2'\")"]
  ]
    count: "2, "
    square m: test_query_matches_with_negated_fields()
  [
    ["", "(\"exported\", \"var j = 1;\")"]
  ]
    count: "4, "
    square m: test_query_matches_with_negated_fields()
  [
    ["", "(\"export_child\", \"var j = 1;\")"]
  ]
    count: "2, "
    square m: test_query_matches_with_negated_fields()
  [
    ["", "(\"exported\", \"k\")"]
  ]
    count: "3, "
    square m: test_query_matches_with_negated_fields()
  [
    ["", "(\"exported_expr\", \"k\")"]
  ]
    count: "4, "
    square m: test_query_matches_with_negated_fields()
  [
    ["", "(\"export_child\", \"k\")"]
  ]
  square m: test_query_matches_with_negated_fields()
test_query_matches_with_negated_fields(): 
  captures m: test_query_matches_with_field_at_root()
    count: "0, "
    square m: test_query_matches_with_field_at_root()
  [
    ["", "(\"name\", \"b\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_field_at_root()
  [
    ["", "(\"name\", \"c\")"]
  ]
  square m: test_query_matches_with_field_at_root()
test_query_matches_with_field_at_root(): 
  captures m: test_query_matches_with_repeated_leaf_nodes()
    count: "\n                    0,\n                    "
    square m: test_query_matches_with_repeated_leaf_nodes()
  [
    ["\n                        ", "(\"doc\", \"// four\")"]
    [",\n                        ", "(\"doc\", \"// five\")"]
    [",\n                        ", "(\"doc\", \"// six\")"]
    [",\n                        ", "(\"name\", \"B\")"]
    [",\n                    ", nil]
  ]
    count: "1, "
    square m: test_query_matches_with_repeated_leaf_nodes()
  [
    ["", "(\"doc\", \"// eight\")"]
    [", ", "(\"name\", \"d\")"]
  ]
  square m: test_query_matches_with_repeated_leaf_nodes()
test_query_matches_with_repeated_leaf_nodes(): 
  captures m: test_query_matches_with_optional_nodes_inside_of_repetitions()
    count: "\n                0,\n                "
    square m: test_query_matches_with_optional_nodes_inside_of_repetitions()
  [
    ["", "(\"num\", \"1\")"]
    [", ", "(\"num\", \"2\")"]
    [", ", "(\"num\", \"3\")"]
    [", ", "(\"num\", \"4\")"]
  ]
  square m: test_query_matches_with_optional_nodes_inside_of_repetitions()
test_query_matches_with_optional_nodes_inside_of_repetitions(): 
  captures m: test_query_matches_with_top_level_repetitions()
    count: "0, "
    square m: test_query_matches_with_top_level_repetitions()
  [
    ["", "(\"doc\", \"// a\")"]
    [", ", "(\"doc\", \"// b\")"]
    [", ", "(\"doc\", \"// c\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_top_level_repetitions()
  [
    ["", "(\"doc\", \"// e\")"]
  ]
  square m: test_query_matches_with_top_level_repetitions()
test_query_matches_with_top_level_repetitions(): 
  captures m: test_query_matches_with_non_terminal_repetitions_within_root()
    count: "0, "
    square m: test_query_matches_with_non_terminal_repetitions_within_root()
  [
    ["", "(\"id\", \"a\")"]
    [", ", "(\"id\", \"b\")"]
    [", ", "(\"id\", \"c\")"]
  ]
  square m: test_query_matches_with_non_terminal_repetitions_within_root()
test_query_matches_with_non_terminal_repetitions_within_root(): 
  captures m: test_query_matches_with_nested_repetitions()
    count: "\n                    0,\n                    "
    square m: test_query_matches_with_nested_repetitions()
  [
    ["", "(\"x\", \"a\")"]
    [", ", "(\"x\", \"c\")"]
    [", ", "(\"x\", \"d\")"]
    [", ", "(\"x\", \"e\")"]
    [", ", "(\"x\", \"f\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nested_repetitions()
  [
    ["", "(\"x\", \"g\")"]
  ]
  square m: test_query_matches_with_nested_repetitions()
test_query_matches_with_nested_repetitions(): 
  captures m: test_query_matches_with_multiple_repetition_patterns_that_intersect_other_pattern()
    count: "7, "
    square m: test_query_matches_with_multiple_repetition_patterns_that_intersect_other_pattern()
  [
    ["", "(\"comment\", \"// the comment\")"]
  ]
  square m: test_query_matches_with_multiple_repetition_patterns_that_intersect_other_pattern()
test_query_matches_with_multiple_repetition_patterns_that_intersect_other_pattern(): skip (bc why???!!!)
  captures m: test_query_matches_with_trailing_repetitions_of_last_child()
    count: "0, "
    square m: test_query_matches_with_trailing_repetitions_of_last_child()
  [
    ["", "(\"operand\", \"b\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_trailing_repetitions_of_last_child()
  [
    ["", "(\"operand\", \"c\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_trailing_repetitions_of_last_child()
  [
    ["", "(\"operand\", \"(!b && ~c)\")"]
  ]
  square m: test_query_matches_with_trailing_repetitions_of_last_child()
test_query_matches_with_trailing_repetitions_of_last_child(): 
  captures m: test_query_matches_with_leading_zero_or_more_repeated_leaf_nodes()
    count: "0, "
    square m: test_query_matches_with_leading_zero_or_more_repeated_leaf_nodes()
  [
    ["", "(\"name\", \"a\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_leading_zero_or_more_repeated_leaf_nodes()
  [
    ["", "(\"name\", \"c\")"]
  ]
    count: "\n                    0,\n                    "
    square m: test_query_matches_with_leading_zero_or_more_repeated_leaf_nodes()
  [
    ["", "(\"doc\", \"// four\")"]
    [", ", "(\"doc\", \"// five\")"]
    [", ", "(\"name\", \"e\")"]
  ]
  square m: test_query_matches_with_leading_zero_or_more_repeated_leaf_nodes()
test_query_matches_with_leading_zero_or_more_repeated_leaf_nodes(): 
  captures m: test_query_matches_with_trailing_optional_nodes()
    count: "0, "
    square m: test_query_matches_with_trailing_optional_nodes()
  [
    ["", "(\"class\", \"A\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_trailing_optional_nodes()
  [
    ["", "(\"class\", \"A\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_trailing_optional_nodes()
  [
    ["", "(\"class\", \"B\")"]
    [", ", "(\"superclass\", \"C\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_trailing_optional_nodes()
  [
    ["", "(\"class\", \"D\")"]
  ]
  square m: test_query_matches_with_trailing_optional_nodes()
test_query_matches_with_trailing_optional_nodes(): 
  captures m: test_query_matches_with_nested_optional_nodes()
    count: "0, "
    square m: test_query_matches_with_nested_optional_nodes()
  [
    ["", "(\"outer-fn\", \"a\")"]
    [", ", "(\"inner-fn\", \"c\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nested_optional_nodes()
  [
    ["", "(\"outer-fn\", \"c\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nested_optional_nodes()
  [
    ["", "(\"outer-fn\", \"a\")"]
    [", ", "(\"inner-fn\", \"d\")"]
    [", ", "(\"num\", \"1\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nested_optional_nodes()
  [
    ["", "(\"outer-fn\", \"a\")"]
    [", ", "(\"inner-fn\", \"d\")"]
    [", ", "(\"num\", \"2\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nested_optional_nodes()
  [
    ["", "(\"outer-fn\", \"d\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nested_optional_nodes()
  [
    ["", "(\"outer-fn\", \"e\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nested_optional_nodes()
  [
    ["", "(\"outer-fn\", \"f\")"]
    [", ", "(\"inner-fn\", \"g\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_nested_optional_nodes()
  [
    ["", "(\"outer-fn\", \"g\")"]
  ]
  square m: test_query_matches_with_nested_optional_nodes()
test_query_matches_with_nested_optional_nodes(): 
  captures m: test_query_matches_with_repeated_internal_nodes()
    count: "0, "
    square m: test_query_matches_with_repeated_internal_nodes()
  [
    ["", "(\"deco\", \"c\")"]
    [", ", "(\"deco\", \"d\")"]
    [", ", "(\"name\", \"e\")"]
  ]
  square m: test_query_matches_with_repeated_internal_nodes()
test_query_matches_with_repeated_internal_nodes(): 
  captures m: test_query_matches_with_simple_alternatives()
    count: "0, "
    square m: test_query_matches_with_simple_alternatives()
  [
    ["", "(\"key\", \"'d'\")"]
    [", ", "(\"val2\", \"e => f\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_simple_alternatives()
  [
    ["", "(\"key\", \"h\")"]
    [", ", "(\"val1\", \"function i() {}\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_simple_alternatives()
  [
    ["", "(\"key\", \"j\")"]
    [", ", "(\"val2\", \"_ => k\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_simple_alternatives()
  [
    ["", "(\"key\", \"'l'\")"]
    [", ", "(\"val1\", \"function m() {}\")"]
  ]
  square m: test_query_matches_with_simple_alternatives()
test_query_matches_with_simple_alternatives(): 
  captures m: test_query_matches_with_alternatives_in_repetitions()
    count: "0, "
    square m: test_query_matches_with_alternatives_in_repetitions()
  [
    ["", "(\"el\", \"b\")"]
    [", ", "(\"el\", \"'c'\")"]
    [", ", "(\"el\", \"d\")"]
  ]
    count: "\n                    0,\n                    "
    square m: test_query_matches_with_alternatives_in_repetitions()
  [
    ["", "(\"el\", \"e\")"]
    [", ", "(\"el\", \"'f'\")"]
    [", ", "(\"el\", \"'g'\")"]
    [", ", "(\"el\", \"h\")"]
  ]
  square m: test_query_matches_with_alternatives_in_repetitions()
test_query_matches_with_alternatives_in_repetitions(): 
  captures m: test_query_matches_with_alternatives_at_root()
    count: "0, "
    square m: test_query_matches_with_alternatives_at_root()
  [
    ["", "(\"keyword\", \"function\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_alternatives_at_root()
  [
    ["", "(\"keyword\", \"if\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_alternatives_at_root()
  [
    ["", "(\"keyword\", \"return\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_alternatives_at_root()
  [
    ["", "(\"keyword\", \"else\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_alternatives_at_root()
  [
    ["", "(\"keyword\", \"throw\")"]
  ]
  square m: test_query_matches_with_alternatives_at_root()
test_query_matches_with_alternatives_at_root(): 
  captures m: test_query_matches_with_alternatives_under_fields()
    count: "0, "
    square m: test_query_matches_with_alternatives_under_fields()
  [
    ["", "(\"variable\", \"a\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_alternatives_under_fields()
  [
    ["", "(\"variable\", \"b\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_alternatives_under_fields()
  [
    ["", "(\"variable\", \"f\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_alternatives_under_fields()
  [
    ["", "(\"variable\", \"i\")"]
  ]
  square m: test_query_matches_with_alternatives_under_fields()
test_query_matches_with_alternatives_under_fields(): 
  captures m: test_query_matches_in_language_with_simple_aliases()
    count: "0, "
    square m: test_query_matches_in_language_with_simple_aliases()
  [
    ["", "(\"tag\", \"div\")"]
  ]
    count: "0, "
    square m: test_query_matches_in_language_with_simple_aliases()
  [
    ["", "(\"tag\", \"script\")"]
  ]
    count: "0, "
    square m: test_query_matches_in_language_with_simple_aliases()
  [
    ["", "(\"tag\", \"script\")"]
  ]
    count: "0, "
    square m: test_query_matches_in_language_with_simple_aliases()
  [
    ["", "(\"tag\", \"style\")"]
  ]
    count: "0, "
    square m: test_query_matches_in_language_with_simple_aliases()
  [
    ["", "(\"tag\", \"style\")"]
  ]
    count: "0, "
    square m: test_query_matches_in_language_with_simple_aliases()
  [
    ["", "(\"tag\", \"div\")"]
  ]
  square m: test_query_matches_in_language_with_simple_aliases()
test_query_matches_in_language_with_simple_aliases(): 
  captures m: test_query_matches_with_different_tokens_with_the_same_string_value()
    count: "0, "
    square m: test_query_matches_with_different_tokens_with_the_same_string_value()
  [
    ["", "(\"less\", \"<\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_different_tokens_with_the_same_string_value()
  [
    ["", "(\"greater\", \">\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_different_tokens_with_the_same_string_value()
  [
    ["", "(\"less\", \"<\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_different_tokens_with_the_same_string_value()
  [
    ["", "(\"greater\", \">\")"]
  ]
  square m: test_query_matches_with_different_tokens_with_the_same_string_value()
test_query_matches_with_different_tokens_with_the_same_string_value(): 
  captures m: test_query_matches_with_too_many_permutations_to_track()
    count: "0, "
    square m: test_query_matches_with_too_many_permutations_to_track()
  [
    ["", "(\"pre\", \"hello\")"]
    [", ", "(\"post\", \"hello\")"]
  ]
  square m: test_query_matches_with_too_many_permutations_to_track()
test_query_matches_with_too_many_permutations_to_track(): skip (choke, noVec)
  captures m: test_query_matches_with_alternatives_and_too_many_permutations_to_track()
    count: "1, "
    square m: test_query_matches_with_alternatives_and_too_many_permutations_to_track()
  [
    ["", "(\"method\", \"b\")"]
  ]
  square m: test_query_matches_with_alternatives_and_too_many_permutations_to_track()
test_query_matches_with_alternatives_and_too_many_permutations_to_track(): skip (bc why???!!!)
  captures m: test_query_matches_with_anonymous_tokens()
    count: "1, "
    square m: test_query_matches_with_anonymous_tokens()
  [
    ["", "(\"operator\", \"&&\")"]
  ]
    count: "2, "
    square m: test_query_matches_with_anonymous_tokens()
  [
    ["", "(\"quote\", \"\\\"\")"]
  ]
    count: "2, "
    square m: test_query_matches_with_anonymous_tokens()
  [
    ["", "(\"quote\", \"\\\"\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_anonymous_tokens()
  [
    ["", "(\"punctuation\", \";\")"]
  ]
  square m: test_query_matches_with_anonymous_tokens()
test_query_matches_with_anonymous_tokens(): 
  captures m: test_query_matches_with_supertypes()
    count: "2, "
    square m: test_query_matches_with_supertypes()
  [
    ["", "(\"var_def\", \"a\")"]
  ]
    count: "3, "
    square m: test_query_matches_with_supertypes()
  [
    ["", "(\"var_ref\", \"b\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_supertypes()
  [
    ["", "(\"arg\", \"[d]\")"]
  ]
    count: "3, "
    square m: test_query_matches_with_supertypes()
  [
    ["", "(\"var_ref\", \"d\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_supertypes()
  [
    ["", "(\"kw_arg\", \"f\")"]
  ]
    count: "3, "
    square m: test_query_matches_with_supertypes()
  [
    ["", "(\"var_ref\", \"f\")"]
  ]
  square m: test_query_matches_with_supertypes()
test_query_matches_with_supertypes(): 
  captures m: test_query_matches_within_byte_range()
    count: "0, "
    square m: test_query_matches_within_byte_range()
  [
    ["", "(\"element\", \"a\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_byte_range()
  [
    ["", "(\"element\", \"b\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_byte_range()
  [
    ["", "(\"element\", \"c\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_byte_range()
  [
    ["", "(\"element\", \"c\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_byte_range()
  [
    ["", "(\"element\", \"d\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_byte_range()
  [
    ["", "(\"element\", \"e\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_byte_range()
  [
    ["", "(\"element\", \"e\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_byte_range()
  [
    ["", "(\"element\", \"f\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_byte_range()
  [
    ["", "(\"element\", \"g\")"]
  ]
  square m: test_query_matches_within_byte_range()
test_query_matches_within_byte_range(): 
  captures m: test_query_matches_within_point_range()
    count: "0, "
    square m: test_query_matches_within_point_range()
  [
    ["", "(\"element\", \"a\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_point_range()
  [
    ["", "(\"element\", \"b\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_point_range()
  [
    ["", "(\"element\", \"c\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_point_range()
  [
    ["", "(\"element\", \"c\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_point_range()
  [
    ["", "(\"element\", \"d\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_point_range()
  [
    ["", "(\"element\", \"e\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_point_range()
  [
    ["", "(\"element\", \"e\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_point_range()
  [
    ["", "(\"element\", \"f\")"]
  ]
    count: "0, "
    square m: test_query_matches_within_point_range()
  [
    ["", "(\"element\", \"g\")"]
  ]
  square m: test_query_matches_within_point_range()
test_query_matches_within_point_range(): skip (choke, noVec)
  captures m: test_query_captures_within_byte_range()
  square m: test_query_captures_within_byte_range()
  [
    ["\n                ", "(\"function\", \"DEFUN\")"]
    [",\n                ", "(\"string.arg\", \"\\\"safe-length\\\"\")"]
    [",\n                ", "(\"string\", \"\\\"safe-length\\\"\")"]
    [",\n            ", nil]
  ]
test_query_captures_within_byte_range(): 
  captures m: test_query_matches_with_unrooted_patterns_intersecting_byte_range()
    count: "1, "
    square m: test_query_matches_with_unrooted_patterns_intersecting_byte_range()
  [
    ["", "(\"left\", \"<\")"]
    [", ", "(\"right\", \">\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_unrooted_patterns_intersecting_byte_range()
  [
    ["", "(\"left\", \"{\")"]
    [", ", "(\"right\", \"}\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_unrooted_patterns_intersecting_byte_range()
  [
    ["", "(\"left\", \"<\")"]
    [", ", "(\"right\", \">\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_unrooted_patterns_intersecting_byte_range()
  [
    ["", "(\"left\", \"{\")"]
    [", ", "(\"right\", \"}\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_unrooted_patterns_intersecting_byte_range()
  [
    ["", "(\"left\", \"{\")"]
    [", ", "(\"right\", \"}\")"]
  ]
  square m: test_query_matches_with_unrooted_patterns_intersecting_byte_range()
test_query_matches_with_unrooted_patterns_intersecting_byte_range(): 
  captures m: test_query_captures_within_byte_range_assigned_after_iterating()
  square m: test_query_captures_within_byte_range_assigned_after_iterating()
  [
    ["\n                ", "(\"mod_name\", \"m1\")"]
    [",\n                ", "(\"lbrace\", \"{\")"]
    [",\n                ", "(\"mod_name\", \"m2\")"]
    [",\n                ", "(\"lbrace\", \"{\")"]
    [",\n                ", "(\"fn_name\", \"f1\")"]
    [",\n            ", nil]
  ]
  [
    ["\n                ", "(\"fallible_fn_body\", \"{ Ok(()) }\")"]
    [",\n                ", "(\"fn_name\", \"f3\")"]
    [",\n                ", "(\"rbrace\", \"}\")"]
    ["\n            ", nil]
  ]
test_query_captures_within_byte_range_assigned_after_iterating(): skip (bad end)
  captures m: test_query_matches_different_queries_same_cursor()
    count: "0, "
    square m: test_query_matches_different_queries_same_cursor()
  [
    ["", "(\"id1\", \"a\")"]
  ]
    count: "0, "
    square m: test_query_matches_different_queries_same_cursor()
  [
    ["", "(\"id1\", \"a\")"]
  ]
    count: "1, "
    square m: test_query_matches_different_queries_same_cursor()
  [
    ["", "(\"id2\", \"b\")"]
  ]
    count: "2, "
    square m: test_query_matches_different_queries_same_cursor()
  [
    ["", "(\"id3\", \"c\")"]
  ]
    count: "0, "
    square m: test_query_matches_different_queries_same_cursor()
  [
    ["", "(\"id1\", \"a\")"]
  ]
    count: "1, "
    square m: test_query_matches_different_queries_same_cursor()
  [
    ["", "(\"id2\", \"b\")"]
  ]
  square m: test_query_matches_different_queries_same_cursor()
test_query_matches_different_queries_same_cursor(): 
  captures m: test_query_matches_with_multiple_captures_on_a_node()
    count: "\n                0,\n                "
    square m: test_query_matches_with_multiple_captures_on_a_node()
  [
    ["\n                    ", "(\"name1\", \"foo\")"]
    [",\n                    ", "(\"name2\", \"foo\")"]
    [",\n                    ", "(\"name3\", \"foo\")"]
    [",\n                    ", "(\"body1\", \"{ return 1; }\")"]
    [",\n                    ", "(\"body2\", \"{ return 1; }\")"]
    [",\n                ", nil]
  ]
    count: "\n                0,\n                "
    square m: test_query_matches_with_multiple_captures_on_a_node()
  [
    ["\n                    ", "(\"name1\", \"foo\")"]
    [",\n                    ", "(\"name3\", \"foo\")"]
    [",\n                    ", "(\"body1\", \"{ return 1; }\")"]
    [",\n                    ", "(\"body2\", \"{ return 1; }\")"]
    [",\n                ", nil]
  ]
  square m: test_query_matches_with_multiple_captures_on_a_node()
test_query_matches_with_multiple_captures_on_a_node(): skip (choke, noVec)
  captures m: test_query_matches_with_captured_wildcard_at_root()
  square m: test_query_matches_with_captured_wildcard_at_root()
test_query_matches_with_captured_wildcard_at_root(): skip (match_capture_names_and_rows, last MARKER)
  captures m: test_query_matches_with_no_captures()
    count: "0, "
    square m: test_query_matches_with_no_captures()
  [
  ]
    count: "1, "
    square m: test_query_matches_with_no_captures()
  [
    ["", "(\"s\", \"'hi'\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_no_captures()
  [
  ]
    count: "1, "
    square m: test_query_matches_with_no_captures()
  [
    ["", "(\"s\", \"'bye'\")"]
  ]
  square m: test_query_matches_with_no_captures()
  [
  ]
  [
  ]
test_query_matches_with_no_captures(): 
  captures m: test_query_matches_with_repeated_fields()
    count: "0, "
    square m: test_query_matches_with_repeated_fields()
  [
    ["", "(\"field\", \"a\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_repeated_fields()
  [
    ["", "(\"field\", \"b\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_repeated_fields()
  [
    ["", "(\"field\", \"c\")"]
  ]
  square m: test_query_matches_with_repeated_fields()
test_query_matches_with_repeated_fields(): 
  captures m: test_query_matches_with_deeply_nested_patterns_with_fields()
    count: "0, "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["", "(\"func\", \"a\")"]
    [", ", "(\"args\", \"(1)\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["", "(\"func\", \"a(1).b\")"]
    [", ", "(\"args\", \"(2)\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["", "(\"receiver\", \"a(1)\")"]
    [", ", "(\"method\", \"b\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["", "(\"func\", \"a(1).b(2).c\")"]
    [", ", "(\"args\", \"(3)\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["", "(\"receiver\", \"a(1).b(2)\")"]
    [", ", "(\"method\", \"c\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["", "(\"func\", \"a(1).b(2).c(3).d\")"]
    [", ", "(\"args\", \"(4)\")"]
  ]
    count: "1, "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["", "(\"receiver\", \"a(1).b(2).c(3)\")"]
    [", ", "(\"method\", \"d\")"]
  ]
    count: "0, "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["", "(\"func\", \"a(1).b(2).c(3).d(4).e\")"]
    [", ", "(\"args\", \"(5)\")"]
  ]
    count: "\n                    1,\n                    "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["", "(\"receiver\", \"a(1).b(2).c(3).d(4)\")"]
    [", ", "(\"method\", \"e\")"]
  ]
    count: "\n                    0,\n                    "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["", "(\"func\", \"a(1).b(2).c(3).d(4).e(5).f\")"]
    [", ", "(\"args\", \"(6)\")"]
  ]
    count: "\n                    1,\n                    "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["", "(\"receiver\", \"a(1).b(2).c(3).d(4).e(5)\")"]
    [", ", "(\"method\", \"f\")"]
  ]
    count: "\n                    0,\n                    "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["", "(\"func\", \"a(1).b(2).c(3).d(4).e(5).f(6).g\")"]
    [", ", "(\"args\", \"(7)\")"]
  ]
    count: "\n                    1,\n                    "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["\n                        ", "(\"receiver\", \"a(1).b(2).c(3).d(4).e(5).f(6)\")"]
    [",\n                        ", "(\"method\", \"g\")"]
    [",\n                    ", nil]
  ]
    count: "\n                    0,\n                    "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["\n                        ", "(\"func\", \"a(1).b(2).c(3).d(4).e(5).f(6).g(7).h\")"]
    [",\n                        ", "(\"args\", \"(8)\")"]
    [",\n                    ", nil]
  ]
    count: "\n                    1,\n                    "
    square m: test_query_matches_with_deeply_nested_patterns_with_fields()
  [
    ["\n                        ", "(\"receiver\", \"a(1).b(2).c(3).d(4).e(5).f(6).g(7)\")"]
    [",\n                        ", "(\"method\", \"h\")"]
    [",\n                    ", nil]
  ]
  square m: test_query_matches_with_deeply_nested_patterns_with_fields()
test_query_matches_with_deeply_nested_patterns_with_fields(): 
  captures m: test_query_matches_with_indefinite_step_containing_no_captures()
    count: "0, "
    square m: test_query_matches_with_indefinite_step_containing_no_captures()
  [
    ["", "(\"name\", \"HasUnionField\")"]
  ]
  square m: test_query_matches_with_indefinite_step_containing_no_captures()
test_query_matches_with_indefinite_step_containing_no_captures(): 
  captures m: test_query_captures_basic()
    count: "2, "
    square m: test_query_captures_basic()
  [
    ["", "(\"delimiter\", \":\")"]
  ]
    count: "0, "
    square m: test_query_captures_basic()
  [
    ["", "(\"method.def\", \"bc\")"]
    [", ", "(\"method.alias\", \"de\")"]
  ]
    count: "3, "
    square m: test_query_captures_basic()
  [
    ["", "(\"operator\", \"=\")"]
  ]
    count: "1, "
    square m: test_query_captures_basic()
  [
    ["", "(\"function.def\", \"fg\")"]
    [", ", "(\"function.alias\", \"hi\")"]
  ]
    count: "2, "
    square m: test_query_captures_basic()
  [
    ["", "(\"delimiter\", \":\")"]
  ]
    count: "0, "
    square m: test_query_captures_basic()
  [
    ["", "(\"method.def\", \"jk\")"]
    [", ", "(\"method.alias\", \"lm\")"]
  ]
    count: "3, "
    square m: test_query_captures_basic()
  [
    ["", "(\"operator\", \"=\")"]
  ]
    count: "1, "
    square m: test_query_captures_basic()
  [
    ["", "(\"function.def\", \"no\")"]
    [", ", "(\"function.alias\", \"pq\")"]
  ]
  square m: test_query_captures_basic()
  [
    ["\n                ", "(\"method.def\", \"bc\")"]
    [",\n                ", "(\"delimiter\", \":\")"]
    [",\n                ", "(\"method.alias\", \"de\")"]
    [",\n                ", "(\"function.def\", \"fg\")"]
    [",\n                ", "(\"operator\", \"=\")"]
    [",\n                ", "(\"function.alias\", \"hi\")"]
    [",\n                ", "(\"method.def\", \"jk\")"]
    [",\n                ", "(\"delimiter\", \":\")"]
    [",\n                ", "(\"method.alias\", \"lm\")"]
    [",\n                ", "(\"function.def\", \"no\")"]
    [",\n                ", "(\"operator\", \"=\")"]
    [",\n                ", "(\"function.alias\", \"pq\")"]
    [",\n            ", nil]
  ]
test_query_captures_basic(): 
  captures m: test_query_captures_with_text_conditions()
  square m: test_query_captures_with_text_conditions()
  [
    ["\n                ", "(\"variable\", \"toad\")"]
    [",\n                ", "(\"variable\", \"panda\")"]
    [",\n                ", "(\"variable\", \"ab\")"]
    [",\n                ", "(\"function.builtin\", \"require\")"]
    [",\n                ", "(\"variable\", \"require\")"]
    [",\n                ", "(\"constructor\", \"Cd\")"]
    [",\n                ", "(\"variable\", \"Cd\")"]
    [",\n                ", "(\"constant\", \"EF\")"]
    [",\n                ", "(\"constructor\", \"EF\")"]
    [",\n                ", "(\"variable\", \"EF\")"]
    [",\n            ", nil]
  ]
test_query_captures_with_text_conditions(): 
  captures m: test_query_captures_with_predicates()
  square m: test_query_captures_with_predicates()
  [
  ]
  [
  ]
test_query_captures_with_predicates(): skip (choke, noVec)
  captures m: test_query_captures_with_quoted_predicate_args()
  square m: test_query_captures_with_quoted_predicate_args()
test_query_captures_with_quoted_predicate_args(): skip (choke, noVec)
  captures m: test_query_captures_with_duplicates()
  square m: test_query_captures_with_duplicates()
  [
    ["", "(\"function\", \"x\")"]
    [", ", "(\"variable\", \"x\")"]
    [",", nil]
  ]
test_query_captures_with_duplicates(): 
  captures m: test_query_captures_with_many_nested_results_without_fields()
  square m: test_query_captures_with_many_nested_results_without_fields()
  [
    ["\n                ", "(\"colon\", \":\")"]
    [",\n                ", "(\"method-def\", \"method0\")"]
    [",\n                ", "(\"colon\", \":\")"]
    [",\n                ", "(\"comma\", \",\")"]
    [",\n                ", "(\"method-def\", \"method1\")"]
    [",\n                ", "(\"colon\", \":\")"]
    [",\n                ", "(\"comma\", \",\")"]
    [",\n                ", "(\"method-def\", \"method2\")"]
    [",\n                ", "(\"colon\", \":\")"]
    [",\n                ", "(\"comma\", \",\")"]
    [",\n                ", "(\"method-def\", \"method3\")"]
    [",\n                ", "(\"colon\", \":\")"]
    [",\n                ", "(\"comma\", \",\")"]
    [",\n            ", nil]
  ]
test_query_captures_with_many_nested_results_without_fields(): skip (bad end)
  captures m: test_query_captures_with_many_nested_results_with_fields()
  square m: test_query_captures_with_many_nested_results_with_fields()
  [
    ["\n                ", "(\"left\", \"y0\")"]
    [",\n                ", "(\"right\", \"y0\")"]
    [",\n                ", "(\"left\", \"y1\")"]
    [",\n                ", "(\"right\", \"y1\")"]
    [",\n                ", "(\"left\", \"y2\")"]
    [",\n                ", "(\"right\", \"y2\")"]
    [",\n                ", "(\"left\", \"y3\")"]
    [",\n                ", "(\"right\", \"y3\")"]
    [",\n                ", "(\"left\", \"y4\")"]
    [",\n                ", "(\"right\", \"y4\")"]
    [",\n                ", "(\"left\", \"y5\")"]
    [",\n                ", "(\"right\", \"y5\")"]
    [",\n                ", "(\"left\", \"y6\")"]
    [",\n                ", "(\"right\", \"y6\")"]
    [",\n                ", "(\"left\", \"y7\")"]
    [",\n                ", "(\"right\", \"y7\")"]
    [",\n                ", "(\"left\", \"y8\")"]
    [",\n                ", "(\"right\", \"y8\")"]
    [",\n                ", "(\"left\", \"y9\")"]
    [",\n                ", "(\"right\", \"y9\")"]
    [",\n            ", nil]
  ]
test_query_captures_with_many_nested_results_with_fields(): skip (bad end, gone MARKER)
  captures m: test_query_captures_with_too_many_nested_results()
  square m: test_query_captures_with_too_many_nested_results()
  [
    ["\n                ", "(\"template-call\", \"b.c0().d0 `😄`\")"]
    [",\n                ", "(\"method-name\", \"c0\")"]
    [",\n                ", "(\"method-name\", \"d0\")"]
    [",\n                ", "(\"template-tag\", \"d0\")"]
    [",\n            ", nil]
  ]
  [
    ["\n                ", "(\"template-call\", \"b.c9().d9 `😄`\")"]
    [",\n                ", "(\"method-name\", \"c9\")"]
    [",\n                ", "(\"method-name\", \"d9\")"]
    [",\n                ", "(\"template-tag\", \"d9\")"]
    [",\n            ", nil]
  ]
  [
    ["", "(\"method-name\", \"e\")"]
    [", ", "(\"method-name\", \"f\")"]
    [",", nil]
  ]
test_query_captures_with_too_many_nested_results(): 
  captures m: test_query_captures_with_definite_pattern_containing_many_nested_matches()
  square m: test_query_captures_with_definite_pattern_containing_many_nested_matches()
  [
    ["", "(\"l-bracket\", \"[\")"]
  ]
  [
    ["", "(\"r-bracket\", \"]\")"]
  ]
test_query_captures_with_definite_pattern_containing_many_nested_matches(): 
  captures m: test_query_captures_ordered_by_both_start_and_end_positions()
  square m: test_query_captures_ordered_by_both_start_and_end_positions()
  [
    ["\n                ", "(\"member\", \"a.b(c.d().e).f\")"]
    [",\n                ", "(\"call\", \"a.b(c.d().e)\")"]
    [",\n                ", "(\"member\", \"a.b\")"]
    [",\n                ", "(\"variable\", \"a\")"]
    [",\n                ", "(\"member\", \"c.d().e\")"]
    [",\n                ", "(\"call\", \"c.d()\")"]
    [",\n                ", "(\"member\", \"c.d\")"]
    [",\n                ", "(\"variable\", \"c\")"]
    [",\n            ", nil]
  ]
test_query_captures_ordered_by_both_start_and_end_positions(): skip (will gone MARKER)
  captures m: test_query_captures_with_matches_removed()
  square m: test_query_captures_with_matches_removed()
test_query_captures_with_matches_removed(): skip (bc why???!!!)
  captures m: test_query_captures_and_matches_iterators_are_fused()
  square m: test_query_captures_and_matches_iterators_are_fused()
test_query_captures_and_matches_iterators_are_fused(): skip (bc why???!!!)
  captures m: test_query_text_callback_returns_chunks()
  square m: test_query_text_callback_returns_chunks()
  [
    ["\n                ", "(\"all_upper\", \"SOMETHING\")"]
    [",\n                ", "(\"all_lower\", \"a\")"]
    [",\n                ", "(\"all_lower\", \"transform\")"]
    [",\n                ", "(\"leading_upper\", \"AnotherThing\")"]
    [",\n                ", "(\"all_lower\", \"b\")"]
    [",\n                ", "(\"all_lower\", \"c\")"]
    [",\n                ", "(\"all_upper\", \"PARAMETER\")"]
    [",\n            ", nil]
  ]
test_query_text_callback_returns_chunks(): skip (bc why???!!!)
  captures m: test_query_start_byte_for_pattern()
  square m: test_query_start_byte_for_pattern()
test_query_start_byte_for_pattern(): 
  captures m: test_query_capture_names()
  square m: test_query_capture_names()
test_query_capture_names(): skip (choke, noVec)
  captures m: test_query_lifetime_is_separate_from_nodes_lifetime()
  square m: test_query_lifetime_is_separate_from_nodes_lifetime()
test_query_lifetime_is_separate_from_nodes_lifetime(): skip (noVec)
  captures m: test_query_with_no_patterns()
  square m: test_query_with_no_patterns()
test_query_with_no_patterns(): skip (choke, noVec)
  captures m: test_query_comments()
    count: "0, "
    square m: test_query_comments()
  [
    ["", "(\"fn-name\", \"one\")"]
  ]
  square m: test_query_comments()
test_query_comments(): 
  captures m: test_query_disable_pattern()
    count: "3, "
    square m: test_query_disable_pattern()
  [
    ["", "(\"body\", \"{ constructor() {} }\")"]
  ]
    count: "1, "
    square m: test_query_disable_pattern()
  [
    ["", "(\"body\", \"{ return 1; }\")"]
  ]
  square m: test_query_disable_pattern()
test_query_disable_pattern(): 
  captures m: test_query_alternative_predicate_prefix()
    count: "0, "
    square m: test_query_alternative_predicate_prefix()
  [
    ["", "(\"keyword\", \"DEFUN\")"]
    [", ", "(\"function\", \"\\\"identity\\\"\")"]
  ]
  square m: test_query_alternative_predicate_prefix()
test_query_alternative_predicate_prefix(): 
  captures m: test_query_step_is_definite()
  square m: test_query_step_is_definite()
test_query_step_is_definite(): skip (bc why???!!!)
  captures m: assert_query_matches(
    language: Language,
    query: &Query,
    source: &str,
    expected: &[(usize, Vec<(&str, &str)
  square m: assert_query_matches(
    language: Language,
    query: &Query,
    source: &str,
    expected: &[(usize, Vec<(&str, &str)
assert_query_matches(
    language: Language,
    query: &Query,
    source: &str,
    expected: &[(usize, Vec<(&str, &str): skip ([internal])
  captures m: collect_matches<'a>(
    matches: impl Iterator<Item = QueryMatch<'a, 'a>>,
    query: &'a Query,
    source: &'a str,
)
  square m: collect_matches<'a>(
    matches: impl Iterator<Item = QueryMatch<'a, 'a>>,
    query: &'a Query,
    source: &'a str,
)
collect_matches<'a>(
    matches: impl Iterator<Item = QueryMatch<'a, 'a>>,
    query: &'a Query,
    source: &'a str,
): skip ([internal])
  captures m: collect_captures<'a>(
    captures: impl Iterator<Item = (QueryMatch<'a, 'a>, usize)
  square m: collect_captures<'a>(
    captures: impl Iterator<Item = (QueryMatch<'a, 'a>, usize)
collect_captures<'a>(
    captures: impl Iterator<Item = (QueryMatch<'a, 'a>, usize): skip ([internal])
  captures m: format_captures<'a>(
    captures: impl Iterator<Item = QueryCapture<'a>>,
    query: &'a Query,
    source: &'a str,
)
  square m: format_captures<'a>(
    captures: impl Iterator<Item = QueryCapture<'a>>,
    query: &'a Query,
    source: &'a str,
)
format_captures<'a>(
    captures: impl Iterator<Item = QueryCapture<'a>>,
    query: &'a Query,
    source: &'a str,
): skip ([internal])
if stubs
done.
