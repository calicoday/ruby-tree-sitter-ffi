=== bind_fn_plan
{"ts_parser_"=>
  ["new",
   "delete",
   "set_language",
   "language",
   "set_included_ranges",
   "included_ranges",
   "parse",
   "parse_string",
   "parse_string_encoding",
   "reset",
   "set_timeout_micros",
   "timeout_micros",
   "set_cancellation_flag",
   "cancellation_flag",
   "set_logger",
   "logger",
   "print_dot_graphs"],
 "ts_tree_"=>
  ["copy",
   "delete",
   "root_node",
   "language",
   "edit",
   "get_changed_ranges",
   "print_dot_graph",
   "cursor_new",
   "cursor_delete",
   "cursor_reset",
   "cursor_current_node",
   "cursor_current_field_name",
   "cursor_current_field_id",
   "cursor_goto_parent",
   "cursor_goto_next_sibling",
   "cursor_goto_first_child",
   "cursor_goto_first_child_for_byte",
   "cursor_goto_first_child_for_point",
   "cursor_copy"],
 "ts_node_"=>
  ["type",
   "symbol",
   "start_byte",
   "start_point",
   "end_byte",
   "end_point",
   "string",
   "is_null",
   "is_named",
   "is_missing",
   "is_extra",
   "has_changes",
   "has_error",
   "parent",
   "child",
   "field_name_for_child",
   "child_count",
   "named_child",
   "named_child_count",
   "child_by_field_name",
   "child_by_field_id",
   "next_sibling",
   "prev_sibling",
   "next_named_sibling",
   "prev_named_sibling",
   "first_child_for_byte",
   "first_named_child_for_byte",
   "descendant_for_byte_range",
   "descendant_for_point_range",
   "named_descendant_for_byte_range",
   "named_descendant_for_point_range",
   "edit",
   "eq"],
 "ts_query_"=>
  ["new",
   "delete",
   "pattern_count",
   "capture_count",
   "string_count",
   "start_byte_for_pattern",
   "predicates_for_pattern",
   "step_is_definite",
   "capture_name_for_id",
   "string_value_for_id",
   "disable_capture",
   "disable_pattern",
   "cursor_new",
   "cursor_delete",
   "cursor_exec",
   "cursor_did_exceed_match_limit",
   "cursor_match_limit",
   "cursor_set_match_limit",
   "cursor_set_byte_range",
   "cursor_set_point_range",
   "cursor_next_match",
   "cursor_remove_match",
   "cursor_next_capture"],
 "ts_language_"=>
  ["symbol_count",
   "symbol_name",
   "symbol_for_name",
   "field_count",
   "field_name_for_id",
   "field_id_for_name",
   "symbol_type",
   "version"]}

=== idio_fn_plan
{"misc"=>{"base"=>["text"]},
 "Language"=>
  {"base"=>
    ["version",
     "node_kind_count",
     "node_kind_for_id",
     "id_for_node_kind",
     "node_kind_is_named",
     "node_kind_is_visible",
     "field_count",
     "field_name_for_id",
     "field_id_for_name"]},
 "Parser"=>
  {"base"=>
    ["new",
     "set_language",
     "language",
     "logger",
     "set_logger",
     "print_dot_graphs",
     "stop_printing_dot_graphs",
     "parse",
     "parse_utf16",
     "parse_with",
     "parse_utf16_with",
     "reset",
     "timeout_micros",
     "set_timeout_micros",
     "set_included_ranges"],
   "Drop"=>["drop"]},
 "Tree"=>
  {"base"=>["root_node", "language", "edit", "walk", "changed_ranges"],
   "fmt::Debug"=>["fmt"],
   "Drop"=>["drop"],
   "Clone"=>["clone"]},
 "Node"=>
  {"base"=>
    ["new",
     "id",
     "kind_id",
     "kind",
     "language",
     "is_named",
     "is_extra",
     "has_changes",
     "has_error",
     "is_error",
     "is_missing",
     "start_byte",
     "end_byte",
     "byte_range",
     "range",
     "start_position",
     "end_position",
     "child",
     "child_count",
     "named_child",
     "named_child_count",
     "child_by_field_name",
     "child_by_field_id",
     "field_name_for_child",
     "children",
     "named_children",
     "children_by_field_name",
     "children_by_field_id",
     "parent",
     "next_sibling",
     "prev_sibling",
     "next_named_sibling",
     "prev_named_sibling",
     "descendant_for_byte_range",
     "named_descendant_for_byte_range",
     "descendant_for_point_range",
     "named_descendant_for_point_range",
     "to_sexp",
     "utf8_text",
     "utf16_text",
     "walk",
     "edit"],
   "PartialEq"=>["eq"],
   "hash::Hash"=>["hash"],
   "fmt::Debug"=>["fmt"]},
 "TreeCursor"=>
  {"base"=>
    ["node",
     "field_id",
     "field_name",
     "goto_first_child",
     "goto_parent",
     "goto_next_sibling",
     "goto_first_child_for_byte",
     "goto_first_child_for_point",
     "reset"],
   "Clone"=>["clone"],
   "Drop"=>["drop"]},
 "Query"=>
  {"base"=>
    ["new",
     "start_byte_for_pattern",
     "pattern_count",
     "capture_names",
     "capture_index_for_name",
     "property_predicates",
     "property_settings",
     "general_predicates",
     "disable_capture",
     "disable_pattern",
     "step_is_definite",
     "parse_property"],
   "PartialEq"=>["eq"],
   "Drop"=>["drop"]},
 "QueryCursor"=>
  {"base"=>
    ["new",
     "match_limit",
     "set_match_limit",
     "did_exceed_match_limit",
     "matches",
     "captures",
     "set_byte_range",
     "set_point_range"],
   "Drop"=>["drop"]},
 "QueryMatch"=>
  {"base"=>
    ["remove",
     "nodes_for_capture_index",
     "new",
     "satisfies_text_predicates",
     "get_text"],
   "fmt::Debug"=>["fmt"]},
 "QueryProperty"=>{"base"=>["new"]},
 "QueryMatches"=>
  {"base"=>["set_byte_range", "set_point_range"], "Iterator"=>["next"]},
 "QueryCaptures"=>
  {"base"=>["set_byte_range", "set_point_range"], "Iterator"=>["next"]},
 "F\n" + "where\n" + "    F: FnMut(Node) -> I,\n" + "    I: Iterator + 'a,"=>
  {"base"=>[], "TextProvider\n" + "where\n" + "\n"=>["text"]},
 "&'a [u8]"=>{"base"=>[], "TextProvider"=>["text"]},
 "Point"=>
  {"base"=>["new"],
   "fmt::Display"=>["fmt"],
   "Into"=>["into"],
   "From"=>["from"]},
 "Range"=>{"base"=>[], "Into"=>["into"], "From"=>["from"]},
 "&'a InputEdit"=>{"base"=>[], "Into"=>["into"]},
 "LossyUtf8"=>{"base"=>["new"], "Iterator"=>["next", "predicate_error"]},
 "IncludedRangesError"=>{"base"=>[], "fmt::Display"=>["fmt"]},
 "LanguageError"=>{"base"=>[], "fmt::Display"=>["fmt"]},
 "QueryError"=>{"base"=>[], "fmt::Display"=>["fmt"]}}

=== sort_bind_base
{"Parser"=>
  ["cancellation_flag",
   "delete",
   "included_ranges",
   "language",
   "logger",
   "new",
   "parse",
   "parse_string",
   "parse_string_encoding",
   "print_dot_graphs",
   "reset",
   "set_cancellation_flag",
   "set_included_ranges",
   "set_language",
   "set_logger",
   "set_timeout_micros",
   "timeout_micros"],
 "Tree"=>
  ["copy",
   "cursor_copy",
   "cursor_current_field_id",
   "cursor_current_field_name",
   "cursor_current_node",
   "cursor_delete",
   "cursor_goto_first_child",
   "cursor_goto_first_child_for_byte",
   "cursor_goto_first_child_for_point",
   "cursor_goto_next_sibling",
   "cursor_goto_parent",
   "cursor_new",
   "cursor_reset",
   "delete",
   "edit",
   "get_changed_ranges",
   "language",
   "print_dot_graph",
   "root_node"],
 "Node"=>
  ["child",
   "child_by_field_id",
   "child_by_field_name",
   "child_count",
   "descendant_for_byte_range",
   "descendant_for_point_range",
   "edit",
   "end_byte",
   "end_point",
   "eq",
   "field_name_for_child",
   "first_child_for_byte",
   "first_named_child_for_byte",
   "has_changes",
   "has_error",
   "is_extra",
   "is_missing",
   "is_named",
   "is_null",
   "named_child",
   "named_child_count",
   "named_descendant_for_byte_range",
   "named_descendant_for_point_range",
   "next_named_sibling",
   "next_sibling",
   "parent",
   "prev_named_sibling",
   "prev_sibling",
   "start_byte",
   "start_point",
   "string",
   "symbol",
   "type"],
 "Query"=>
  ["capture_count",
   "capture_name_for_id",
   "cursor_delete",
   "cursor_did_exceed_match_limit",
   "cursor_exec",
   "cursor_match_limit",
   "cursor_new",
   "cursor_next_capture",
   "cursor_next_match",
   "cursor_remove_match",
   "cursor_set_byte_range",
   "cursor_set_match_limit",
   "cursor_set_point_range",
   "delete",
   "disable_capture",
   "disable_pattern",
   "new",
   "pattern_count",
   "predicates_for_pattern",
   "start_byte_for_pattern",
   "step_is_definite",
   "string_count",
   "string_value_for_id"],
 "Language"=>
  ["field_count",
   "field_id_for_name",
   "field_name_for_id",
   "symbol_count",
   "symbol_for_name",
   "symbol_name",
   "symbol_type",
   "version"]}

=== sort_idio_base
{"misc"=>["text"],
 "Language"=>
  ["field_count",
   "field_id_for_name",
   "field_name_for_id",
   "id_for_node_kind",
   "node_kind_count",
   "node_kind_for_id",
   "node_kind_is_named",
   "node_kind_is_visible",
   "version"],
 "Parser"=>
  ["language",
   "logger",
   "new",
   "parse",
   "parse_utf16",
   "parse_utf16_with",
   "parse_with",
   "print_dot_graphs",
   "reset",
   "set_included_ranges",
   "set_language",
   "set_logger",
   "set_timeout_micros",
   "stop_printing_dot_graphs",
   "timeout_micros"],
 "Tree"=>["changed_ranges", "edit", "language", "root_node", "walk"],
 "Node"=>
  ["byte_range",
   "child",
   "child_by_field_id",
   "child_by_field_name",
   "child_count",
   "children",
   "children_by_field_id",
   "children_by_field_name",
   "descendant_for_byte_range",
   "descendant_for_point_range",
   "edit",
   "end_byte",
   "end_position",
   "field_name_for_child",
   "has_changes",
   "has_error",
   "id",
   "is_error",
   "is_extra",
   "is_missing",
   "is_named",
   "kind",
   "kind_id",
   "language",
   "named_child",
   "named_child_count",
   "named_children",
   "named_descendant_for_byte_range",
   "named_descendant_for_point_range",
   "new",
   "next_named_sibling",
   "next_sibling",
   "parent",
   "prev_named_sibling",
   "prev_sibling",
   "range",
   "start_byte",
   "start_position",
   "to_sexp",
   "utf16_text",
   "utf8_text",
   "walk"],
 "TreeCursor"=>
  ["field_id",
   "field_name",
   "goto_first_child",
   "goto_first_child_for_byte",
   "goto_first_child_for_point",
   "goto_next_sibling",
   "goto_parent",
   "node",
   "reset"],
 "Query"=>
  ["capture_index_for_name",
   "capture_names",
   "disable_capture",
   "disable_pattern",
   "general_predicates",
   "new",
   "parse_property",
   "pattern_count",
   "property_predicates",
   "property_settings",
   "start_byte_for_pattern",
   "step_is_definite"],
 "QueryCursor"=>
  ["captures",
   "did_exceed_match_limit",
   "match_limit",
   "matches",
   "new",
   "set_byte_range",
   "set_match_limit",
   "set_point_range"],
 "QueryMatch"=>
  ["get_text",
   "new",
   "nodes_for_capture_index",
   "remove",
   "satisfies_text_predicates"],
 "QueryProperty"=>["new"],
 "QueryMatches"=>["set_byte_range", "set_point_range"],
 "QueryCaptures"=>["set_byte_range", "set_point_range"],
 "F\n" + "where\n" + "    F: FnMut(Node) -> I,\n" + "    I: Iterator + 'a,"=>
  [],
 "&'a [u8]"=>[],
 "Point"=>["new"],
 "Range"=>[],
 "&'a InputEdit"=>[],
 "LossyUtf8"=>["new"],
 "IncludedRangesError"=>[],
 "LanguageError"=>[],
 "QueryError"=>[]}

=== combo_keys prep_comm
[["Parser", :common],
 ["Tree", :common],
 ["Node", :common],
 ["Query", :common],
 ["Language", :common],
 ["misc", :idio_cla_keys],
 ["TreeCursor", :idio_cla_keys],
 ["QueryCursor", :idio_cla_keys],
 ["QueryMatch", :idio_cla_keys],
 ["QueryProperty", :idio_cla_keys],
 ["QueryMatches", :idio_cla_keys],
 ["QueryCaptures", :idio_cla_keys],
 ["F\n" + "where\n" + "    F: FnMut(Node) -> I,\n" + "    I: Iterator + 'a,",
  :idio_cla_keys],
 ["&'a [u8]", :idio_cla_keys],
 ["Point", :idio_cla_keys],
 ["Range", :idio_cla_keys],
 ["&'a InputEdit", :idio_cla_keys],
 ["LossyUtf8", :idio_cla_keys],
 ["IncludedRangesError", :idio_cla_keys],
 ["LanguageError", :idio_cla_keys],
 ["QueryError", :idio_cla_keys]]

=== keys compose_comm
bind_cla_keys
                common
                                idio_cla_keys
----------------------------------------------------------------------
                Parser
                Tree
                Node
                Query
                Language
                                misc
                                TreeCursor
                                QueryCursor
                                QueryMatch
                                QueryProperty
                                QueryMatches
                                QueryCaptures
                                F
where
    F: FnMut(Node) -> I,
    I: Iterator + 'a,
                                &'a [u8]
                                Point
                                Range
                                &'a InputEdit
                                LossyUtf8
                                IncludedRangesError
                                LanguageError
                                QueryError

=== combo_keys select
[["Parser", :common],
 ["Tree", :common],
 ["Node", :common],
 ["Query", :common],
 ["Language", :common]]

=== base fn of common classes
{"Parser"=>
  {:bind=>
    ["cancellation_flag",
     "delete",
     "included_ranges",
     "language",
     "logger",
     "new",
     "parse",
     "parse_string",
     "parse_string_encoding",
     "print_dot_graphs",
     "reset",
     "set_cancellation_flag",
     "set_included_ranges",
     "set_language",
     "set_logger",
     "set_timeout_micros",
     "timeout_micros"],
   :idio=>
    ["language",
     "logger",
     "new",
     "parse",
     "parse_utf16",
     "parse_utf16_with",
     "parse_with",
     "print_dot_graphs",
     "reset",
     "set_included_ranges",
     "set_language",
     "set_logger",
     "set_timeout_micros",
     "stop_printing_dot_graphs",
     "timeout_micros"]},
 "Tree"=>
  {:bind=>
    ["copy",
     "cursor_copy",
     "cursor_current_field_id",
     "cursor_current_field_name",
     "cursor_current_node",
     "cursor_delete",
     "cursor_goto_first_child",
     "cursor_goto_first_child_for_byte",
     "cursor_goto_first_child_for_point",
     "cursor_goto_next_sibling",
     "cursor_goto_parent",
     "cursor_new",
     "cursor_reset",
     "delete",
     "edit",
     "get_changed_ranges",
     "language",
     "print_dot_graph",
     "root_node"],
   :idio=>["changed_ranges", "edit", "language", "root_node", "walk"]},
 "Node"=>
  {:bind=>
    ["child",
     "child_by_field_id",
     "child_by_field_name",
     "child_count",
     "descendant_for_byte_range",
     "descendant_for_point_range",
     "edit",
     "end_byte",
     "end_point",
     "eq",
     "field_name_for_child",
     "first_child_for_byte",
     "first_named_child_for_byte",
     "has_changes",
     "has_error",
     "is_extra",
     "is_missing",
     "is_named",
     "is_null",
     "named_child",
     "named_child_count",
     "named_descendant_for_byte_range",
     "named_descendant_for_point_range",
     "next_named_sibling",
     "next_sibling",
     "parent",
     "prev_named_sibling",
     "prev_sibling",
     "start_byte",
     "start_point",
     "string",
     "symbol",
     "type"],
   :idio=>
    ["byte_range",
     "child",
     "child_by_field_id",
     "child_by_field_name",
     "child_count",
     "children",
     "children_by_field_id",
     "children_by_field_name",
     "descendant_for_byte_range",
     "descendant_for_point_range",
     "edit",
     "end_byte",
     "end_position",
     "field_name_for_child",
     "has_changes",
     "has_error",
     "id",
     "is_error",
     "is_extra",
     "is_missing",
     "is_named",
     "kind",
     "kind_id",
     "language",
     "named_child",
     "named_child_count",
     "named_children",
     "named_descendant_for_byte_range",
     "named_descendant_for_point_range",
     "new",
     "next_named_sibling",
     "next_sibling",
     "parent",
     "prev_named_sibling",
     "prev_sibling",
     "range",
     "start_byte",
     "start_position",
     "to_sexp",
     "utf16_text",
     "utf8_text",
     "walk"]},
 "Query"=>
  {:bind=>
    ["capture_count",
     "capture_name_for_id",
     "cursor_delete",
     "cursor_did_exceed_match_limit",
     "cursor_exec",
     "cursor_match_limit",
     "cursor_new",
     "cursor_next_capture",
     "cursor_next_match",
     "cursor_remove_match",
     "cursor_set_byte_range",
     "cursor_set_match_limit",
     "cursor_set_point_range",
     "delete",
     "disable_capture",
     "disable_pattern",
     "new",
     "pattern_count",
     "predicates_for_pattern",
     "start_byte_for_pattern",
     "step_is_definite",
     "string_count",
     "string_value_for_id"],
   :idio=>
    ["capture_index_for_name",
     "capture_names",
     "disable_capture",
     "disable_pattern",
     "general_predicates",
     "new",
     "parse_property",
     "pattern_count",
     "property_predicates",
     "property_settings",
     "start_byte_for_pattern",
     "step_is_definite"]},
 "Language"=>
  {:bind=>
    ["field_count",
     "field_id_for_name",
     "field_name_for_id",
     "symbol_count",
     "symbol_for_name",
     "symbol_name",
     "symbol_type",
     "version"],
   :idio=>
    ["field_count",
     "field_id_for_name",
     "field_name_for_id",
     "id_for_node_kind",
     "node_kind_count",
     "node_kind_for_id",
     "node_kind_is_named",
     "node_kind_is_visible",
     "version"]}}

=== combo fn of common classes
{"Parser"=>
  [["cancellation_flag", :left],
   ["delete", :left],
   ["included_ranges", :left],
   ["language", :common],
   ["logger", :common],
   ["new", :common],
   ["parse", :common],
   ["parse_string", :left],
   ["parse_string_encoding", :left],
   ["print_dot_graphs", :common],
   ["reset", :common],
   ["set_cancellation_flag", :left],
   ["set_included_ranges", :common],
   ["set_language", :common],
   ["set_logger", :common],
   ["set_timeout_micros", :common],
   ["timeout_micros", :common],
   ["parse_utf16", :right],
   ["parse_utf16_with", :right],
   ["parse_with", :right],
   ["stop_printing_dot_graphs", :right]],
 "Tree"=>
  [["copy", :left],
   ["cursor_copy", :left],
   ["cursor_current_field_id", :left],
   ["cursor_current_field_name", :left],
   ["cursor_current_node", :left],
   ["cursor_delete", :left],
   ["cursor_goto_first_child", :left],
   ["cursor_goto_first_child_for_byte", :left],
   ["cursor_goto_first_child_for_point", :left],
   ["cursor_goto_next_sibling", :left],
   ["cursor_goto_parent", :left],
   ["cursor_new", :left],
   ["cursor_reset", :left],
   ["delete", :left],
   ["edit", :common],
   ["get_changed_ranges", :left],
   ["language", :common],
   ["print_dot_graph", :left],
   ["root_node", :common],
   ["changed_ranges", :right],
   ["walk", :right]],
 "Node"=>
  [["child", :common],
   ["child_by_field_id", :common],
   ["child_by_field_name", :common],
   ["child_count", :common],
   ["descendant_for_byte_range", :common],
   ["descendant_for_point_range", :common],
   ["edit", :common],
   ["end_byte", :common],
   ["end_point", :left],
   ["eq", :left],
   ["field_name_for_child", :common],
   ["first_child_for_byte", :left],
   ["first_named_child_for_byte", :left],
   ["has_changes", :common],
   ["has_error", :common],
   ["is_extra", :common],
   ["is_missing", :common],
   ["is_named", :common],
   ["is_null", :left],
   ["named_child", :common],
   ["named_child_count", :common],
   ["named_descendant_for_byte_range", :common],
   ["named_descendant_for_point_range", :common],
   ["next_named_sibling", :common],
   ["next_sibling", :common],
   ["parent", :common],
   ["prev_named_sibling", :common],
   ["prev_sibling", :common],
   ["start_byte", :common],
   ["start_point", :left],
   ["string", :left],
   ["symbol", :left],
   ["type", :left],
   ["byte_range", :right],
   ["children", :right],
   ["children_by_field_id", :right],
   ["children_by_field_name", :right],
   ["end_position", :right],
   ["id", :right],
   ["is_error", :right],
   ["kind", :right],
   ["kind_id", :right],
   ["language", :right],
   ["named_children", :right],
   ["new", :right],
   ["range", :right],
   ["start_position", :right],
   ["to_sexp", :right],
   ["utf16_text", :right],
   ["utf8_text", :right],
   ["walk", :right]],
 "Query"=>
  [["capture_count", :left],
   ["capture_name_for_id", :left],
   ["cursor_delete", :left],
   ["cursor_did_exceed_match_limit", :left],
   ["cursor_exec", :left],
   ["cursor_match_limit", :left],
   ["cursor_new", :left],
   ["cursor_next_capture", :left],
   ["cursor_next_match", :left],
   ["cursor_remove_match", :left],
   ["cursor_set_byte_range", :left],
   ["cursor_set_match_limit", :left],
   ["cursor_set_point_range", :left],
   ["delete", :left],
   ["disable_capture", :common],
   ["disable_pattern", :common],
   ["new", :common],
   ["pattern_count", :common],
   ["predicates_for_pattern", :left],
   ["start_byte_for_pattern", :common],
   ["step_is_definite", :common],
   ["string_count", :left],
   ["string_value_for_id", :left],
   ["capture_index_for_name", :right],
   ["capture_names", :right],
   ["general_predicates", :right],
   ["parse_property", :right],
   ["property_predicates", :right],
   ["property_settings", :right]],
 "Language"=>
  [["field_count", :common],
   ["field_id_for_name", :common],
   ["field_name_for_id", :common],
   ["symbol_count", :left],
   ["symbol_for_name", :left],
   ["symbol_name", :left],
   ["symbol_type", :left],
   ["version", :common],
   ["id_for_node_kind", :right],
   ["node_kind_count", :right],
   ["node_kind_for_id", :right],
   ["node_kind_is_named", :right],
   ["node_kind_is_visible", :right]]}

=== fn compare
