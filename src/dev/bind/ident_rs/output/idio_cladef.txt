pub struct Language(*const ffi::TSLanguage);

/// A tree that represents the syntactic structure of a source code file.
pub struct Tree(NonNull<ffi::TSTree>);

/// A position in a multi-line text document, in terms of rows and columns.
///
/// Rows and columns are zero-based.
#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct Point {
    pub row: usize,
    pub column: usize,
}
pub struct Range {
    pub start_byte: usize,
    pub end_byte: usize,
    pub start_point: Point,
    pub end_point: Point,
}
pub struct InputEdit {
    pub start_byte: usize,
    pub old_end_byte: usize,
    pub new_end_byte: usize,
    pub start_position: Point,
    pub old_end_position: Point,
    pub new_end_position: Point,
}
pub struct Node<'a>(ffi::TSNode, PhantomData<&'a ()>);

/// A stateful object that this is used to produce a `Tree` based on some source code.
pub struct Parser(NonNull<ffi::TSParser>);

/// A type of log message.
#[derive(Debug, PartialEq, Eq)]
pub enum LogType {
    Parse,
    Lex,
}
pub struct TreeCursor<'a>(ffi::TSTreeCursor, PhantomData<&'a ()>);

/// A set of patterns that match nodes in a syntax tree.
#[derive(Debug)]
pub struct Query {
    ptr: NonNull<ffi::TSQuery>,
    capture_names: Vec<String>,
    text_predicates: Vec<Box<[TextPredicate]>>,
    property_settings: Vec<Box<[QueryProperty]>>,
    property_predicates: Vec<Box<[(QueryProperty, bool)]>>,
    general_predicates: Vec<Box<[QueryPredicate]>>,
}
pub struct QueryCursor {
    ptr: NonNull<ffi::TSQueryCursor>,
}
pub struct QueryProperty {
    pub key: Box<str>,
    pub value: Option<Box<str>>,
    pub capture_id: Option<usize>,
}
pub enum QueryPredicateArg {
    Capture(u32),
    String(Box<str>),
}
pub struct QueryPredicate {
    pub operator: Box<str>,
    pub args: Vec<QueryPredicateArg>,
}
pub struct QueryMatch<'cursor, 'tree> {
    pub pattern_index: usize,
    pub captures: &'cursor [QueryCapture<'tree>],
    id: u32,
    cursor: *mut ffi::TSQueryCursor,
}
pub struct QueryMatches<'a, 'tree: 'a, T: TextProvider<'a>> {
    ptr: *mut ffi::TSQueryCursor,
    query: &'a Query,
    text_provider: T,
    buffer1: Vec<u8>,
    buffer2: Vec<u8>,
    _tree: PhantomData<&'tree ()>,
}
pub struct QueryCaptures<'a, 'tree: 'a, T: TextProvider<'a>> {
    ptr: *mut ffi::TSQueryCursor,
    query: &'a Query,
    text_provider: T,
    buffer1: Vec<u8>,
    buffer2: Vec<u8>,
    _tree: PhantomData<&'tree ()>,
}

pub trait TextProvider<'a> {
    type I: Iterator<Item = &'a [u8]> + 'a;
    fn text(&mut self, node: Node) -> Self::I;
}
pub struct QueryCapture<'a> {
    pub node: Node<'a>,
    pub index: u32,
}
pub struct LanguageError {
    version: usize,
}
pub struct IncludedRangesError(pub usize);

/// An error that occurred when trying to create a `Query`.
#[derive(Debug, PartialEq, Eq)]
pub struct QueryError {
    pub row: usize,
    pub column: usize,
    pub offset: usize,
    pub message: String,
    pub kind: QueryErrorKind,
}
pub enum QueryErrorKind {
    Syntax,
    NodeType,
    Field,
    Capture,
    Predicate,
    Structure,
}
enum TextPredicate {
    CaptureEqString(u32, String, bool),
    CaptureEqCapture(u32, u32, bool),
    CaptureMatchString(u32, regex::bytes::Regex, bool),
}
pub struct LossyUtf8<'a> {
    bytes: &'a [u8],
    in_replacement: bool,
}

impl Language 
    pub fn version(&self) -> usize 
    pub fn node_kind_count(&self) -> usize 
    pub fn node_kind_for_id(&self, id: u16) -> Option<&'static str> 
    pub fn id_for_node_kind(&self, kind: &str, named: bool) -> u16 
    pub fn node_kind_is_named(&self, id: u16) -> bool 

    pub fn node_kind_is_visible(&self, id: u16) -> bool 
    pub fn field_count(&self) -> usize 
    pub fn field_name_for_id(&self, field_id: u16) -> Option<&'static str> 
    pub fn field_id_for_name(&self, field_name: impl AsRef<[u8]>) -> Option<u16> 

impl Parser 
    pub fn new() -> Parser 
    pub fn set_language(&mut self, language: Language) -> Result<(), LanguageError> 
    pub fn language(&self) -> Option<Language> 
    pub fn logger(&self) -> Option<&Logger> 
    pub fn set_logger(&mut self, logger: Option<Logger>) 
    pub fn print_dot_graphs(&mut self, file: &impl AsRawFd) 
    pub fn stop_printing_dot_graphs(&mut self) 
    pub fn parse(&mut self, text: impl AsRef<[u8]>, old_tree: Option<&Tree>) -> Option<Tree> 
    pub fn parse_utf16(
        &mut self,
        input: impl AsRef<[u16]>,
        old_tree: Option<&Tree>,
    ) -> Option<Tree> 
    pub fn parse_with<'a, T: AsRef<[u8]>, F: FnMut(usize, Point) -> T>(
        &mut self,
        callback: &mut F,
        old_tree: Option<&Tree>,
    ) -> Option<Tree> 
    pub fn parse_utf16_with<'a, T: AsRef<[u16]>, F: FnMut(usize, Point) -> T>(
        &mut self,
        callback: &mut F,
        old_tree: Option<&Tree>,
    ) -> Option<Tree> 
    pub fn reset(&mut self) 
    pub fn timeout_micros(&self) -> u64 
    pub fn set_timeout_micros(&mut self, timeout_micros: u64) 
    pub fn set_included_ranges<'a>(
        &mut self,
        ranges: &'a [Range],
    ) -> Result<(), IncludedRangesError> 

impl Drop for Parser 
    fn drop(&mut self) 

impl Tree 
    pub fn root_node(&self) -> Node 
    pub fn language(&self) -> Language 
    pub fn edit(&mut self, edit: &InputEdit) 
    pub fn walk(&self) -> TreeCursor 
    pub fn changed_ranges(&self, other: &Tree) -> impl ExactSizeIterator<Item = Range> 

impl fmt::Debug for Tree 
    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> 

impl Drop for Tree 
    fn drop(&mut self) 

impl Clone for Tree 
    fn clone(&self) -> Tree 
    fn new(node: ffi::TSNode) -> Option<Self> 
    pub fn id(&self) -> usize 
    pub fn kind_id(&self) -> u16 
    pub fn kind(&self) -> &'static str 
    pub fn language(&self) -> Language 
    pub fn is_named(&self) -> bool 
    pub fn is_extra(&self) -> bool 
    pub fn has_changes(&self) -> bool 
    pub fn has_error(&self) -> bool 
    pub fn is_error(&self) -> bool 
    pub fn is_missing(&self) -> bool 
    pub fn start_byte(&self) -> usize 
    pub fn end_byte(&self) -> usize 
    pub fn byte_range(&self) -> std::ops::Range<usize> 
    pub fn range(&self) -> Range 
    pub fn start_position(&self) -> Point 
    pub fn end_position(&self) -> Point 
    pub fn child(&self, i: usize) -> Option<Self> 
    pub fn child_count(&self) -> usize 
    pub fn named_child<'a>(&'a self, i: usize) -> Option<Self> 
    pub fn named_child_count(&self) -> usize 
    pub fn child_by_field_name(&self, field_name: impl AsRef<[u8]>) -> Option<Self> 
    pub fn child_by_field_id(&self, field_id: u16) -> Option<Self> 
    pub fn field_name_for_child(&self, child_index: u32) -> Option<&'static str> 
    pub fn children<'a>(
        &self,
        cursor: &'a mut TreeCursor<'tree>,
    ) -> impl ExactSizeIterator<Item = Node<'tree>> + 'a 
    pub fn named_children<'a>(
        &self,
        cursor: &'a mut TreeCursor<'tree>,
    ) -> impl ExactSizeIterator<Item = Node<'tree>> + 'a 
    pub fn children_by_field_name<'a>(
        &self,
        field_name: &str,
        cursor: &'a mut TreeCursor<'tree>,
    ) -> impl Iterator<Item = Node<'tree>> + 'a 
    pub fn children_by_field_id<'a>(
        &self,
        field_id: u16,
        cursor: &'a mut TreeCursor<'tree>,
    ) -> impl Iterator<Item = Node<'tree>> + 'a 
    pub fn parent(&self) -> Option<Self> 
    pub fn next_sibling(&self) -> Option<Self> 
    pub fn prev_sibling(&self) -> Option<Self> 
    pub fn next_named_sibling(&self) -> Option<Self> 
    pub fn prev_named_sibling(&self) -> Option<Self> 
    pub fn descendant_for_byte_range(&self, start: usize, end: usize) -> Option<Self> 
    pub fn named_descendant_for_byte_range(&self, start: usize, end: usize) -> Option<Self> 
    pub fn descendant_for_point_range(&self, start: Point, end: Point) -> Option<Self> 
    pub fn named_descendant_for_point_range(&self, start: Point, end: Point) -> Option<Self> 

    pub fn to_sexp(&self) -> String 

    pub fn utf8_text<'a>(&self, source: &'a [u8]) -> Result<&'a str, str::Utf8Error> 

    pub fn utf16_text<'a>(&self, source: &'a [u16]) -> &'a [u16] 
    pub fn walk(&self) -> TreeCursor<'tree> 
    pub fn edit(&mut self, edit: &InputEdit) 
    fn eq(&self, other: &Self) -> bool 
    fn hash<H: hash::Hasher>(&self, state: &mut H) 
    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> 
    pub fn node(&self) -> Node<'a> 
    pub fn field_id(&self) -> Option<u16> 
    pub fn field_name(&self) -> Option<&'static str> 
    pub fn goto_first_child(&mut self) -> bool 
    pub fn goto_parent(&mut self) -> bool 
    pub fn goto_next_sibling(&mut self) -> bool 
    pub fn goto_first_child_for_byte(&mut self, index: usize) -> Option<usize> 
    pub fn goto_first_child_for_point(&mut self, point: Point) -> Option<usize> 
    pub fn reset(&mut self, node: Node<'a>) 
    fn clone(&self) -> Self 
    fn drop(&mut self) 

impl Query 
    pub fn new(language: Language, source: &str) -> Result<Self, QueryError> 
    pub fn start_byte_for_pattern(&self, pattern_index: usize) -> usize 
    pub fn pattern_count(&self) -> usize 
    pub fn capture_names(&self) -> &[String] 
    pub fn capture_index_for_name(&self, name: &str) -> Option<u32> 
    pub fn property_predicates(&self, index: usize) -> &[(QueryProperty, bool)] 
    pub fn property_settings(&self, index: usize) -> &[QueryProperty] 
    pub fn general_predicates(&self, index: usize) -> &[QueryPredicate] 
    pub fn disable_capture(&mut self, name: &str) 
    pub fn disable_pattern(&mut self, index: usize) 
    pub fn step_is_definite(&self, byte_offset: usize) -> bool 

    fn parse_property(
        row: usize,
        function_name: &str,
        capture_names: &[String],
        string_values: &[String],
        args: &[ffi::TSQueryPredicateStep],
    ) -> Result<QueryProperty, QueryError> 

impl QueryCursor 
    pub fn new() -> Self 
    pub fn match_limit(&self) -> u32 
    pub fn set_match_limit(&mut self, limit: u32) 
    pub fn did_exceed_match_limit(&self) -> bool 
    pub fn matches<'a, 'tree: 'a, T: TextProvider<'a> + 'a>(
        &'a mut self,
        query: &'a Query,
        node: Node<'tree>,
        text_provider: T,
    ) -> QueryMatches<'a, 'tree, T> 
    pub fn captures<'a, 'tree: 'a, T: TextProvider<'a> + 'a>(
        &'a mut self,
        query: &'a Query,
        node: Node<'tree>,
        text_provider: T,
    ) -> QueryCaptures<'a, 'tree, T> 
    pub fn set_byte_range(&mut self, range: ops::Range<usize>) -> &mut Self 
    pub fn set_point_range(&mut self, range: ops::Range<Point>) -> &mut Self 
    pub fn remove(self) 

    pub fn nodes_for_capture_index(
        &self,
        capture_ix: u32,
    ) -> impl Iterator<Item = Node<'tree>> + '_ 

    fn new(m: ffi::TSQueryMatch, cursor: *mut ffi::TSQueryCursor) -> Self 

    fn satisfies_text_predicates(
        &self,
        query: &Query,
        buffer1: &mut Vec<u8>,
        buffer2: &mut Vec<u8>,
        text_provider: &mut impl TextProvider<'a>,
    ) -> bool 
        fn get_text<'a, 'b: 'a, I: Iterator<Item = &'b [u8]>>(
            buffer: &'a mut Vec<u8>,
            mut chunks: I,
        ) -> &'a [u8] 

impl QueryProperty 
    pub fn new(key: &str, value: Option<&str>, capture_id: Option<usize>) -> Self 

    fn next(&mut self) -> Option<Self::Item> 

    fn next(&mut self) -> Option<Self::Item> 
    pub fn set_byte_range(&mut self, range: ops::Range<usize>) 

    pub fn set_point_range(&mut self, range: ops::Range<Point>) 
    pub fn set_byte_range(&mut self, range: ops::Range<usize>) 

    pub fn set_point_range(&mut self, range: ops::Range<Point>) 
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 

    fn text(&mut self, node: Node) -> Self::I 

    fn text(&mut self, node: Node) -> Self::I 

impl PartialEq for Query 
    fn eq(&self, other: &Self) -> bool 

impl Drop for Query 
    fn drop(&mut self) 

impl Drop for QueryCursor 
    fn drop(&mut self) 

impl Point 
    pub fn new(row: usize, column: usize) -> Self 

impl fmt::Display for Point 
    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> 

impl Into<ffi::TSPoint> for Point 
    fn into(self) -> ffi::TSPoint 

impl From<ffi::TSPoint> for Point 
    fn from(point: ffi::TSPoint) -> Self 

impl Into<ffi::TSRange> for Range 
    fn into(self) -> ffi::TSRange 

impl From<ffi::TSRange> for Range 
    fn from(range: ffi::TSRange) -> Self 
    fn into(self) -> ffi::TSInputEdit 
    pub fn new(bytes: &'a [u8]) -> Self 

    fn next(&mut self) -> Option<&'a str> 

fn predicate_error(row: usize, message: String) -> QueryError 

impl fmt::Display for IncludedRangesError 
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 

impl fmt::Display for LanguageError 
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 

impl fmt::Display for QueryError 
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 

impl error::Error for IncludedRangesError 
impl error::Error for LanguageError 
impl error::Error for QueryError 
