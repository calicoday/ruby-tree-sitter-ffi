#### new scaffolder for spec_gen config files!!!

require './src/gen/gen_runner.rb'

def mk_blank_head(name, fn_arr)
  expected_result = <<-INDENTED_HEREDOC
# generated by src/gen/gen_sigs_blank.rb, to be COPIED and filled in.

class #{name}
  def before
    %q%
    %
  end
  
  def sig(fn_name)
    case fn_name
    #{fn_arr.map{|e| "when #{e} then "}.join("\n\t\t")}
    else
      nil
    end
  end
end
	INDENTED_HEREDOC
end

# takes hash fn_hash, 
# eg {ts_parser_set_language: 'arg_1, arg_2',
#     ts_parser_included_ranges: 'arg_1, [:uint32_p]'
#     ts_parser_included_ranges: 'arg_1, :uint32_p'
# cd drop brackets unless supplying init value???
def mk_blank_more(name, fn_hash)
  expected_result = <<-INDENTED_HEREDOC
# generated by src/gen/gen_sigs_blank.rb, to be COPIED and filled in.

class #{name}
  def before
    %q%
    %
  end
  
  def sig(fn_name)
    case fn_name
    #{fn_hash.map{|k, v| "when #{k.inspect} then #{v}"}.join("\n\t\t")}
    else
      nil
    end
  end
end
	INDENTED_HEREDOC
end



devdir = './src/gen'
gendir = './gen'
# outdir = gendir + '/sigs-prep'
outdir = devdir + '/spec_gen_prep'
srcdir = './lib/tree_sitter_ffi'

runner = GenRunner.new
runner.legacy_prepare_dirs(srcdir, gendir, outdir, devdir, true) #womping

  
['node', 'tree', 'parser', 'query'].each do |bosstag|
  runner.write_open(:out, :out_blank, "/#{bosstag}_sigs_blank.rb", 'w')

  s = runner.read(:src, "/#{bosstag}.rb")
  
  calls = s.scan(/wrap_attach\(([^)]+)\)/)
  
  fn_names = calls.map do |wrap|
    wrap.map do |w|
      entries = w.scan(/\[\s*:[^\]]*\[[^\]]*\][^\]]*\]/)
      entries.map{|e| e.scan(/:ts_\w+/).first}
    end
  end
  klass = bosstag.capitalize + 'Sigs'
  runner.write_some(:out_blank, mk_blank_head(klass, fn_names.flatten))
  
  runner.write_close(:out_blank)
end
	
# # name it *.rb, so any syntax highlighting will be ruby
# puts "Writing diff -r sigs-keep/ sigs/ to sigs_diff.rb..."
# `diff -r -x.* ./gen/sigs-keep ./gen/sigs > ./gen/sigs_diff.rb`

puts "done."
